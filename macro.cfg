#[gcode_macro G1]
#rename_existing: G1.1
#gcode:
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2 
  #m117

  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2 
 # m117
  #RESTORE_GCODE_STATE NAME=G1
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.1 
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.1 
  #m117
  
[save_variables]
filename: ~/printer_data/config/.variables.stb

[gcode_macro HEAT_CHAMBER]
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET=60 HTEMP=100
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G1 Z80 X175 Y200 F54000
    SET_PIN PIN=WS7040 VALUE=1
    M106 S153
    #Save_pos
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=saved_pos VALUE={True}
    M84
    #_Restore_pos EXTRA=0
    
[gcode_macro CLEAN_NOZZLE]
gcode:
    {% set E = params.E %}
    G0 X70 Y355 F72000
    G0 Z3 F7200
    {% if E %}
        M83
        G92 E0
        G1 E20 F1800
        G1 E80 F720
        G1 E-20 F1800
    {% endif %}
    G0 X120 Y358 F7200
    G0 X65 Y355 F72000
    G0 X120 Y358 F7200
    G0 Y350 F7200

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
     PRINT_END
     CLEAR_PAUSE
     SDCARD_RESET_FILE
     BASE_CANCEL_PRINT

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode: 
    G92 E0    
    G0 E20 F1500        
    G92 E0                                        
    RESTORE_GCODE_STATE NAME=PAUSE_STATE
    BASE_RESUME

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    G1 E-5 F1800                                                           
    G1 X175 Y1 F54000
    G1 E-15 F800
 
[gcode_macro PRINT_START]
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    # SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=curr_lane VALUE=0
    # SET_GCODE_VARIABLE MACRO=TR_Variables VARIABLE=new_lane VALUE=1
    {% set BED_TEMP = params.BED_TEMP|default(80)|int %}
    {% set EXT_TEMP = params.EXT_TEMP|default(200)|int %}
    {% set CMB_TEMP = params.CMB_TEMP|default(0)|int %}
    # {% set LANE = params.LANE|default(-1)|int %}
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %} 
    {% set purge_nozzle = False %}
    # {% set bed_position =  %}
    
    # {% if not (0 <= LANE < printer.configfile.config["trad_rack"]["lane_count"]|int) %}
    #     { action_raise_error("Invalid lane") }
    # {% endif %}
    # M118 B{BED_TEMP} E{EXT_TEMP} L{LANE}
    
    {% if CMB_TEMP %}
        {% if printer['temperature_fan Chamber_fan'].target == 1.0 %}
            HEAT_CHAMBER
        {% endif %}
        SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET={CMB_TEMP}
        TEMPERATURE_WAIT SENSOR="temperature_fan Chamber_fan" MINIMUM={CMB_TEMP + 2}
        M140 S{BED_TEMP}
    {% endif %}

    CLEAR_PAUSE
    M140 S{BED_TEMP}
    # {% if printer.trad_rack.active_lane != LANE %}
    #     {% set purge_nozzle = True %}      
    #     M109 S{EXT_TEMP}              
    #     TR_LOAD_TOOLHEAD LANE={LANE} 
    #     G1 E-20 F1800
    # {% endif %}
    M104 S{EXT_TEMP-50}
    #TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={120}
    M118 WAIT B{BED_TEMP} #E{EXT_TEMP}
    M190 S{BED_TEMP}
    #{% set dockprobe = false %}
    BED_MESH_CLEAR
    SET_PIN PIN=WS7040 VALUE=1
    M106 S0
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET=1
    # _Probe_Lock
    # Restore_pos
    M104 S{EXT_TEMP}
    G28 Z #PROBE_LOCK
    #Attach_Probe_Lock
    QUAD_GANTRY_LEVEL
    # _CALIBRATE_Z #BED_POSITION={bed_position}
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    # Dock_Probe_Unlock
    G0 X70 Y355 F72000
    # SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={EXT_TEMP-20}
    M118 WAIT E{EXT_TEMP}+-20
    {% if purge_nozzle %}
        CLEAN_NOZZLE E=1
    {% else %}
        CLEAN_NOZZLE
    {% endif %}
    PRIME_LINE

[gcode_macro PRIME_LINE]
gcode:
    G0 X125 Y0 F72000
    G1 E18 F1800
    G92 E0
    M83
    G0 Z0.4
    G91
    G1 X100 E20 F3600
    G92 E0
    G90
    G0 F72000

[gcode_macro PRINT_END]
gcode: 
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    TURN_OFF_HEATERS
    G92 E0
    G1 E-5 F1800
    G1 F54000 X350 Y350
    G1 E-15 F800
    M84
    M107
    BED_MESH_CLEAR
    SET_PIN PIN=WS7040 VALUE=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET=1
    #SET_FAN_SPEED FAN=TMC2209_fan SPEED=0
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PRINT_TEST]
variable_xyz: 0,0,0
variable_x: 3
variable_y: 2
variable_z: 1
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode: 
    #RESPOND MSG="{printer.configfile.settings.stepper_x.position_max}"
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G0 X100 Y50 Z10 F60000
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=999
    SET_VELOCITY_LIMIT ACCEL=50
    G0 X250 F6000
    G0 Y150 F6000
    
    SET_VELOCITY_LIMIT ACCEL=20000
    G0 X100 Y50 Z10 F60000
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
    SET_VELOCITY_LIMIT ACCEL=50
    G0 X250 F6000
    G0 Y150 F6000

    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.config.printer.square_corner_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.config.printer.max_accel}
    # {% set Ox = printer["configfile"].config["quad_gantry_level"].points.split(",")[0]|float %}
    # {% set Oy = printer["configfile"].config["quad_gantry_level"].points.split(",")[1]|float %}
    # {% set Ox1 = printer["configfile"].config["quad_gantry_level"].points.split(",")[2]|float %}
    # {% set Oy1 = printer["configfile"].config["quad_gantry_level"].points.split(",")[3]|float %}
    # M118 {Ox,Oy,Ox1,Oy1}
    # G28
    # QUAD_GANTRY_LEVEL FAST=1
    # BED_MESH_CALIBRATE FAST=1
    # {% set Max = printer.toolhead.axis_maximum %}
    # {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    # {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
    # {% set Cx = (Max[0] * 0.5) - Ox %}
    # {% set Cy = (Max[1] * 0.5) - Oy %}
    
    # M118 {Cx, Cy}


    #_Restore_pos extra={params.EXT|int|default(1)}
    
    # {% set xyz = printer.toolhead.position.x|int,printer.toolhead.position.y|int,printer.toolhead.position.z|int %}
    # SET_GCODE_VARIABLE MACRO=PRINT_TEST VARIABLE=x VALUE={xyz[0]}
    # SET_GCODE_VARIABLE MACRO=PRINT_TEST VARIABLE=y VALUE={xyz[1]}
    # SET_GCODE_VARIABLE MACRO=PRINT_TEST VARIABLE=z VALUE={xyz[2]}

    # {% set xyz = printer["gcode_macro PRINT_TEST"].x,printer["gcode_macro PRINT_TEST"].y,printer["gcode_macro PRINT_TEST"].z %}
    # M118 {xyz,xyz[0],xyz[1],xyz[2]}"
    # M118 {printer["gcode_macro PRINT_START"].x}
    # M118 {printer["gcode_macro PRINT_START"].saved_pos}
    

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.7 %}
    {% set driver_config = printer.configfile.settings['tmc5160 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    G4 P100
    G28 X350.5
    G90
    G1 X349 F1200
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.7 %}
    {% set driver_config = printer.configfile.settings['tmc5160 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
    G4 P100
    G28 Y359.5
    G90
    G1 Y358 F1200
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}

[gcode_macro SET_STEPPER_ENABLE_]
gcode:
    {% set stepper = params.STEPPER|default(stepper_x) %}
    {% set enable = params.ENABLE|default(0)|int %}
    SET_STEPPER_ENABLE STEPPER={stepper} ENABLE={enable}

[gcode_macro SET_KINEMATIC_POSITION_]
gcode:
    {% set x = params.X|default(0)|float %}
    {% set y = params.Y|default(0)|float %}
    {% set z = params.Z|default(0)|float %}

    SET_KINEMATIC_POSITION X={x} Y={y} Z={z}

[gcode_macro SET_TMC_CURRENT_]
gcode:
    {% set stepper = params.STEPPER|default(extruder) %}
    {% set current = params.CURRENT|default(1)|float %}
    {% set holdcurrent = params.HOLDCURRENT|default(0.25)|float %}
    SET_TMC_CURRENT STEPPER={stepper} CURRENT={current} HOLDCURRENT={holdcurrent}

[gcode_macro SET_TMC_FIELD_]
gcode:
    {% set stepper = params.STEPPER %}
    {% set field = params.FIELD %}
    {% set value = params.VALUE|default(0,0)|float %}
    {% set value_min = params.VALUE.split(",")[0]|int %}
	{% set value_max = params.VALUE.split(",")[1]|int %}
    {% set velocity = params.VELOCITY|default(100)|int %}
    {% set distance = params.DISTANCE|default(100)|int %}
    {% set cycles = params.CYCLES|default(0)|int %}
    {% set steps = value_max - value_min + 1 %}
    
    {% for REPEAT in range(cycles) %}
        {% for INTERVAL in range(steps) %}
            {% set value = value_min + ( (value_max - value_min) / (steps -1) ) * INTERVAL %}
            M118 {field}-{value}
            SET_TMC_FIELD STEPPER={stepper} FIELD={field} VALUE={value|int}
            FORCE_MOVE STEPPER={stepper} DISTANCE={distance} VELOCITY={velocity} ACCEL=4000
            FORCE_MOVE STEPPER={stepper} DISTANCE=-{distance} VELOCITY={velocity} ACCEL=4000
        {% endfor %}
    {% endfor %}

[gcode_macro Boost_run_current]
description: Save the current pressure advance value
variable_current: 0
variable_boost_current: 3
gcode:  
    {% if not printer["gcode_macro Boost_run_current"].current %}
        SET_GCODE_VARIABLE MACRO=Boost_run_current VARIABLE=current VALUE={printer['tmc5160 stepper_x'].run_current}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={boost_current} HOLDCURRENT={boost_current}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={boost_current} HOLDCURRENT={boost_current}
    {% endif %}

[gcode_macro Restore_run_current]
description: Restore saved pressure advance value
gcode:
    {% if printer["gcode_macro Boost_run_current"].current %}
        {% set current = printer["gcode_macro Boost_run_current"].current %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current} HOLDCURRENT={current}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current} HOLDCURRENT={current}
        SET_GCODE_VARIABLE MACRO=Boost_run_current VARIABLE=current VALUE=0
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}
    
#[gcode_macro FIRMWARE_RESTART]
#rename_existing: _FIRMWARE_RESTART
#gcode:
    #Save_param
    #_FIRMWARE_RESTART

# [delayed_gcode _Restore_param]
# initial_duration: 1
# gcode: 
#     _Restore_param

[gcode_macro Save_param]
gcode:
    #SAVE_VARIABLE VARIABLE=yep VALUE={True}
    {% if printer['tmc5160 stepper_x'].drv_status %}
        SAVE_VARIABLE VARIABLE=pos_x VALUE={printer.toolhead.position.x}
        SAVE_VARIABLE VARIABLE=pos_y VALUE={printer.toolhead.position.y}
        SAVE_VARIABLE VARIABLE=pos_z VALUE={printer.toolhead.position.z}
    {% else %}
        SAVE_VARIABLE VARIABLE=pos_x VALUE={0}
    {% endif %}
    SAVE_VARIABLE VARIABLE=ext_temp VALUE={printer.extruder.target}
    SAVE_VARIABLE VARIABLE=bed_temp VALUE={printer.heater_bed.target}
    SAVE_VARIABLE VARIABLE=cmb_temp VALUE={printer['temperature_fan Chamber_fan'].target}
    #SAVE_VARIABLE VARIABLE=led VALUE={printer['output_pin LED'].value}
    SAVE_VARIABLE VARIABLE=ws7040 VALUE={printer['output_pin WS7040'].value}
    SAVE_VARIABLE VARIABLE=fan_spd VALUE={round(printer.fan.speed,2)}

[gcode_macro _Restore_param]
gcode:
    #{% if printer.save_variables.variables.yep %}
        {% if printer.save_variables.variables.pos_x %}
            {% set x = printer.save_variables.variables.pos_x %}
            {% set y = printer.save_variables.variables.pos_y %}
            {% set z = printer.save_variables.variables.pos_z %}
            SET_KINEMATIC_POSITION X={x} Y={y} Z={z}
            SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
        {% endif %}
        {% if params.EXTRA|default(1)|int %}
            M104 S{printer.save_variables.variables.ext_temp}
            M140 S{printer.save_variables.variables.bed_temp}
            SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET={printer.save_variables.variables.cmb_temp}
            #SET_PIN PIN=LED VALUE={printer.save_variables.variables.led}
            SET_PIN PIN=WS7040 VALUE={printer.save_variables.variables.ws7040}
            M106 S{printer.save_variables.variables.fan_spd * 255}
        {% endif %}
    #{% endif %}

    #SAVE_VARIABLE VARIABLE=yep VALUE={False}

[gcode_macro Restore_pos]
gcode:
    {% if printer.toolhead.position.x > 0.1|float %}
    SET_KINEMATIC_POSITION X={printer.toolhead.position.x} Y={printer.toolhead.position.y} Z={printer.toolhead.position.z}
    {% endif %}

[gcode_macro ACCELTEST]
gcode:
    {% set speed = params.SPEED|default(200)|float * 60 %}
    {% set amin = params.AMIN|default(5)|float * 1000 %}
    {% set amax = params.AMAX|default(5)|float * 1000 %}
    {% set steps = params.STEPS|default(1)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}
    {% set line_dist = params.LINE_DIST|default(30)|int / 2 %}
    {% set lines = (24/2)|int %}
    {% set center = printer.toolhead.axis_maximum %}
    {% set center = [center[0] / 2, center[1] / 2] %}

    M118 Running Accel test
    SAVE_GCODE_STATE NAME=acceltest_state
    SET_VELOCITY_LIMIT ACCEL=2000
    {% if not 'xy' in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    G0 X{center[0]} Y{center[1]} F{speed}
    G91
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if amin == amax %}
                    {% set feedrate = amin %}
                {% else %}
                    {% set feedrate = amin + ( (amax - amin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s²" % (feedrate)}
                M118 {INTERVAL+1}/{steps} {"%4.0f mm/s²" % (feedrate)}
                G0 F{speed}
                SET_VELOCITY_LIMIT ACCEL={feedrate} 
                SET_VELOCITY_LIMIT ACCEL_TO_DECEL={feedrate}
                  {% for angle in range(lines) %}
                    {% set angle = angle * (15*pi/180) %}
                    G0 X{line_dist * round((cos(angle)),3)} Y{line_dist * round((sin(angle)),3)}
                    G0 X{line_dist * (2*(round((cos(angle)),3)*-1))} Y{line_dist * (2*(round((sin(angle)),3)*-1))}
                    G0 X{line_dist * round((cos(angle)),3)} Y{line_dist * round((sin(angle)),3)}
                  {% endfor %}
            {% endfor %}
        {% endfor %}
    G90
    M117
    RESTORE_GCODE_STATE NAME=acceltest_state

[gcode_macro SPEEDTEST]
gcode:
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(500)|float * 60 %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}
    {% set inset = params.INSET|default(50)|float %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    #{% set minX = inset %}
    #{% set minY = inset %}

    M118 Running Speed test
    SAVE_GCODE_STATE NAME=speedtest_state
    G90
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                M118 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                G1 F{feedrate} # set feedrate for the round
                G1 X{minX} Y{minY} # front left
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{minX} Y{minY} # front left
                G1 X{maxX} Y{maxY} # back right
                G1 X{maxX} Y{minY} # front right
                G1 X{minX} Y{maxY} # back left
            {% endfor %}
        {% endfor %}
    M117
    RESTORE_GCODE_STATE NAME=speedtest_state

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
variable_accel: 1600
variable_speed: 1600
gcode:
    {% if params.FAST|default(0) %}
        Boost_run_current
        {% set Ox = printer["configfile"].config["quad_gantry_level"].points.split(",")[0]|float %}
        {% set Oy = printer["configfile"].config["quad_gantry_level"].points.split(",")[1]|float %}
        G0 X{Ox} Y{34} F60000
        SET_VELOCITY_LIMIT VELOCITY={speed}
        SET_VELOCITY_LIMIT ACCEL=30000
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=30000
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=30
    {% endif %}
    _QUAD_GANTRY_LEVEL
    {% if params.FAST|default(0) %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
description: Perform Mesh Bed Leveling with klicky automount
variable_parameter_AREA_START: 0,0
variable_parameter_AREA_END: 0,0
variable_speed: 2500
variable_mesh_area_offset: 12
variable_probe_samples: 1
variable_min_probe_count: 3
variable_probe_count_scale_factor: 1.0
variable_enable_reference_index: False
gcode:
    # {% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(10000) %}
    # {% set V = printer["gcode_macro _User_Variables"].verbose %}
    # {% if V %}
    #     { action_respond_info("Bed Mesh Calibrate") }
    # {% endif %}

    # # Attach_Probe_Lock
    # # {% if not printer.quad_gantry_level.applied %}
    # #     QUAD_GANTRY_LEVEL
    # # {% endif %}

    # # _CheckProbe action=query
	# G90
    # Attach_Probe
    # _KLICKY_STATUS_MESHING
    # SET_VELOCITY_LIMIT ACCEL={move_accel}
    {% if params.FAST|default(0) %}
        {% set Ox = printer["configfile"].config["bed_mesh"].mesh_min.split(",")[0]|float - printer['configfile'].config["idm"]["x_offset"]|float %}
        {% set Oy = printer["configfile"].config["bed_mesh"].mesh_min.split(",")[1]|float - printer['configfile'].config["idm"]["y_offset"]|float %}
        SET_VELOCITY_LIMIT ACCEL=35000
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL=35000
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=30
    {% endif %}

    {% if params.AREA_START and params.AREA_END %}
         {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}

        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            # {% if enable_reference_index %}
            #     {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
            #     BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            # {% else %}
                {% if params.FAST|default(0) %}
                    Boost_run_current
                    G0 X{area_min_x} Y{area_min_y} F60000
                    SET_VELOCITY_LIMIT VELOCITY={speed}
                {% endif %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            # {% endif %}
        {% else %}
            {% if params.FAST|default(0) %}
                Boost_run_current
                G0 X{Ox} Y{Oy} F60000
                SET_VELOCITY_LIMIT VELOCITY={speed}
            {% endif %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        {% if params.FAST|default(0) %}
            Boost_run_current
            G0 X{Ox} Y{Oy} F60000
            SET_VELOCITY_LIMIT VELOCITY={speed}
        {% endif %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
    # Dock_Probe
    {% if params.FAST|default(0) %}
        Restore_run_current
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[delayed_gcode shutdown_host]
initial_duration: 0.0
gcode:
    {action_call_remote_method("shutdown_machine")}

[gcode_macro POWEROFF]
gcode:
# {% if printer.idle_timeout.state == 'Idle' %}
    #Save_param
    SET_PIN pin=BTT_RELAY value=0
    UPDATE_DELAYED_GCODE ID=shutdown_host DURATION=1


[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro Save_Pressure_Advance]
description: Save the current pressure advance value
variable_pa: -1
gcode:
    {% set pa = printer.extruder.pressure_advance %}
    {% if pa > 0 %}
        SET_GCODE_VARIABLE MACRO=Save_Pressure_Advance VARIABLE=pa VALUE={pa}
    {% endif %}

[gcode_macro Restore_Pressure_Advance]
description: Restore saved pressure advance value
gcode:
    {% if not (printer["gcode_macro Save_Pressure_Advance"].pa == -1) %}
        SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro Save_Pressure_Advance"].pa}
    {% endif %}

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
    {% set X = params.X|default(1) %}
    {% set Y = params.Y|default(1) %}

  M118 INPUT SHAPER: Noise values, check if sensor is installed
  MEASURE_AXES_NOISE  
  M118 INPUT SHAPER: Resonance Tests starting
    {% if X %}
        M118 INPUT SHAPER: Mesasure X axis
        TEST_RESONANCES AXIS=X
    {% endif %}
    {% if Y %}
        M118 INPUT SHAPER: Mesasure Y axis
        TEST_RESONANCES AXIS=Y
    {% endif %}
  M118 INPUT SHAPER: Resonance Tests done
  M118 INPUT SHAPER: Generate graph in backround
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  M118 BELT TEST: Noise values, check if sensor is installed
  MEASURE_AXES_NOISE
  M118 BELT TEST: Resonance Tests starting ...
  M118 BELT TEST: Mesasure B belt
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  M118 BELT TEST: Mesasure A belt
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  M118 BELT TEST: Resonance Tests done
  M118 BELT TEST: Generate graph in backround
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

# Use:
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro DUMP_SENSORS]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                         'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                'y' : [min.y,(min.y-probe_offset.y)]|max},
                       'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
                        Min X:%7.1f, Y:%7.1f, Z:%7.1f
                        Max X:%7.1f, Y:%7.1f, Z:%7.1f
                        Probe Area Limits:
                        Min X:%7.1f, Y:%7.1f
                        Max X:%7.1f, Y:%7.1f" % 
    (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

#####################################################################
#  Macros needed for several debug activities
#####################################################################


