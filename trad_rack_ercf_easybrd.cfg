[mcu tr]
serial: /dev/serial/by-id/usb-Klipper_rp2040_E6625495535E1337-if00
# canbus_uuid: 5e0c77a8474a
# canbus_interface: can0

[trad_rack]
selector_max_velocity: 400
selector_max_accel: 40000
filament_max_velocity: 150
filament_max_accel: 20000
#toolhead_fil_sensor_pin: ^!PA1
lane_count: 6
lane_spacing: 17.0
servo_down_angle: 0
servo_up_angle: 160
servo_wait_ms: 500
selector_unload_length: 17.5
bowden_length: 1040
extruder_load_length: 40
hotend_load_length: 12
# toolhead_unload_length: 0
selector_sense_speed: 40.0
selector_unload_speed: 60.0
spool_pull_speed: 50
buffer_pull_speed: 80
# toolhead_sense_speed: 0
extruder_load_speed: 60
hotend_load_speed: 20
# toolhead_unload_speed: 0
load_with_toolhead_sensor: False
unload_with_toolhead_sensor: False
fil_homing_retract_dist: 20.0
# target_toolhead_homing_dist: 10
# target_selector_homing_dist: 10
#bowden_length_samples: 10
#pre_unload_gcode:
#post_load_gcode:
#pause_gcode:
#resume_gcode:

[stepper_tr_selector]
step_pin: tr:gpio2
dir_pin: tr:gpio1
enable_pin: !tr:gpio3
rotation_distance: 40
microsteps: 16
endstop_pin: ^tr:gpio15
#endstop_pin: tmc2209_stepper_tr_selector:virtual_endstop
position_min: 0
position_endstop: 0
position_max: 250   # (lane_count - 1) * lane_spacing
homing_speed: 150

[tmc2209 stepper_tr_selector]
uart_pin: tr:gpio0
interpolate: True
run_current: 1
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 1
diag_pin: tr:gpio22
driver_SGTHRS: 200

[stepper_tr_fil_driver]
step_pin: tr:gpio7
dir_pin: tr:gpio8
enable_pin: !tr:gpio6
rotation_distance: 7.710843373 #gr35.24956970514286 #gr1.523809523809524 #Bmg
microsteps: 16
endstop_pin: ^tr:gpio20
position_min: -5000
position_endstop: 0
position_max: 5000
homing_positive_dir: False

[tmc2209 stepper_tr_fil_driver]
uart_pin: tr:gpio9
interpolate: true
run_current: 1
hold_current: 0.3
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: tr:gpio23
driver_SGTHRS: 200

[servo tr_servo]
pin: tr:gpio21
maximum_servo_angle: 180
minimum_pulse_width: 0.000850 #0.000700
maximum_pulse_width: 0.002150

[temperature_sensor TradRack]
sensor_type: temperature_mcu
sensor_mcu: tr
min_temp: 0
max_temp: 150

[save_variables]
filename: ~/printer_data/config/.variables.stb

# SuperSlicer in toolchange - ACTIVATE_EXTRUDER EXTRUDER=extruder[current_extruder] EXT_TEMP=[temperature[current_extruder]] FILAMENT={filament_colour[current_extruder]}
# Filament variables - filament_colour=0/1
# Start gcode - LANE=[initial_tool]
# START_PRINT macro functions see macro.cfg

[gcode_macro _TR_Variables]
description: Variables for use with Trad Rack pre unload and post load gcode
variable_z_lift:         1 # подьем оси z
variable_travel_spd:     1200 # скорость передвижения
variable_z_travel_spd:   100 # скорость передвижения z
variable_retract_len:    10  # величина ретракта
variable_retract_spd:    20 # cкорость ретракта
variable_shape_tip:      True # трамбовать кончик прутка          
variable_take_frame:     False # делать скрины лапсам
variable_use_wiper:      True # юзать мусорку
variable_wp_pos:         70, 355, 3 # позиция мусорки-щетки (x,y,z)
variable_wp_x:           20, 60 # ширина мусорки-стола (x,x1)
variable_tb_pos:         50, 340, 0.2 # позиция края стола перед мусоркой (x,y,z)
variable_ext_spd:        10 # скорость экструдирования какахи в мусорку
variable_wp_move:        120, 358 # конечное движение для очистки сопла после экструзии (x,y)
variable_b_to_b:         50 # длина экструзии для прочистки сопла черный-черный
variable_b_to_w:         100 # черный-белый

variable_x:              0
variable_y:              0
variable_z:              0
variable_saved_pos:      False
variable_fan_spd:        0
variable_z_park:         0
variable_ext_temp:       0
variable_curr_lane:      0
variable_new_lane:       1
gcode:


# [gcode_macro random]
# gcode:
#     {% set wp_x = printer["gcode_macro _TR_Variables"].wp_x %}
#     _PRINT_AR T="{wp_x}"
#     {% set wp_x = range(printer["gcode_macro _TR_Variables"].wp_x) | random %}
#     #{% set wp_x = range(printer["gcode_macro _TR_Variables"].wp_x[0], printer["gcode_macro _TR_Variables"].wp_x[1]) | random %}
#     _PRINT_AR T="{wp_x}"

[trad_rack]
pre_unload_gcode:
    {% if printer.virtual_sdcard.is_active %}
        {% if 'xyz' in printer.toolhead.homed_axes %}
            {% set z_max = printer.toolhead.axis_maximum.z %}
            {% set z_lift = printer["gcode_macro _TR_Variables"].z_lift|float %}
            {% set tspd = printer["gcode_macro _TR_Variables"].travel_spd * 60 %}
            {% set ztspd = printer["gcode_macro _TR_Variables"].z_travel_spd * 60 %}
            {% set retract_len = printer["gcode_macro _TR_Variables"].retract_len %}
            {% set retract_spd = printer["gcode_macro _TR_Variables"].retract_spd * 60 %}
            {% set ext_spd = printer["gcode_macro _TR_Variables"].ext_spd * 60 %}
            {% set shape_tip = printer["gcode_macro _TR_Variables"].shape_tip %}
            {% set use_wiper = printer["gcode_macro _TR_Variables"].use_wiper %}
            {% set wp_pos = printer["gcode_macro _TR_Variables"].wp_pos %}
            {% set x = printer.toolhead.position.x %}
            {% set y = printer.toolhead.position.y %}
            {% set z = printer.toolhead.position.z %}
            {% set z_park = (z + z_lift, z_max)|min %}
            {% set ext_temp = printer["gcode_macro _TR_Variables"].ext_temp %}

            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=x VALUE={x}
            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=y VALUE={y}
            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=z VALUE={z}
            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=z_park VALUE={z_park}
            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=saved_pos VALUE={True}
            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=fan_spd VALUE={round(printer.fan.speed,2)}
            # SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=curr_line VALUE=
            # SAVE_VARIABLE VARIABLE=oldlane VALUE={printer.trad_rack.active_lane}

            SAVE_GCODE_STATE NAME=PRE_UNLOAD_state

            M104 S{ext_temp}
            G90
            M83
            G0 Z{z_park} F{ztspd}

            {% if use_wiper %}
                G1 E-{retract_len} F{retract_spd}
                G0 X{wp_pos[0]} Y{wp_pos[1]} F{tspd}
                G1 E{retract_len} F{retract_spd}
            {% else %}
                G0 X{printer.configfile.settings.stepper_x.position_max|float / 2} Y{printer.configfile.settings.stepper_y.position_max|float - 5} F{tsp}
            {% endif %}
            
            {% if shape_tip %}
                Shape_Tip
            {% endif %}
            RESTORE_GCODE_STATE NAME=PRE_UNLOAD_state
        {% else %}
            Shape_Tip
        {% endif %}
    {% else %}
        Shape_Tip
    {% endif %}
 
post_load_gcode:
    {% if printer.virtual_sdcard.is_active %}
        {% if 'xyz' in printer.toolhead.homed_axes %}
            {% set use_wiper = printer["gcode_macro _TR_Variables"].use_wiper %}
            {% set tspd = printer["gcode_macro _TR_Variables"].travel_spd * 60 %}
            {% set ztspd = printer["gcode_macro _TR_Variables"].z_travel_spd * 60 %}
            {% set retract_len = printer["gcode_macro _TR_Variables"].retract_len %}
            {% set retract_spd = printer["gcode_macro _TR_Variables"].retract_spd * 60 %}
            {% set ext_spd = printer["gcode_macro _TR_Variables"].ext_spd * 60 %}
            {% set x = printer["gcode_macro _TR_Variables"].x %}
            {% set y = printer["gcode_macro _TR_Variables"].y %}
            {% set z = printer["gcode_macro _TR_Variables"].z %}
            {% set take_frame = printer["gcode_macro _TR_Variables"].take_frame %}
            #{% set saved_pos = printer["gcode_macro _TR_Variables"].saved_pos %}
            {% set z_park = printer["gcode_macro _TR_Variables"].z_park %}
            {% set wp_pos = printer["gcode_macro _TR_Variables"].wp_pos %}
            {% set wp_x = range(printer["gcode_macro _TR_Variables"].wp_x[0], printer["gcode_macro _TR_Variables"].wp_x[1])|random %}
            {% set tb_pos = printer["gcode_macro _TR_Variables"].tb_pos %}
            {% set wp_move = printer["gcode_macro _TR_Variables"].wp_move %}
            {% set b_to_b = printer["gcode_macro _TR_Variables"].b_to_b %}
            {% set b_to_w = printer["gcode_macro _TR_Variables"].b_to_w %}
            {% set curr_lane = printer["gcode_macro _TR_Variables"].curr_lane %}
            {% set new_lane = printer["gcode_macro _TR_Variables"].new_lane %}
            {% set ext_temp = printer["gcode_macro _TR_Variables"].ext_temp %}
            #SAVE_VARIABLE VARIABLE=newlane VALUE={printer.trad_rack.active_lane}

            {% if take_frame %}
                TIMELAPSE_TAKE_FRAME
            {% endif %}

            SAVE_GCODE_STATE NAME=POST_LOAD_state
            
            {% if ext_temp %}
                M109 S{ext_temp}
            {% endif %}

            {% if use_wiper %}
                # G0 X{wp_x} Y{wp_pos[1]} Z{wp_pos[2]} F{ztsp}
                M83
                G0 X{wp_x} Y{tb_pos[1]} Z{tb_pos[2]} F{ztspd}
                # G1 E{retract_len}  F{retract_spd}
                {% if not curr_lane %}
                    {% if new_lane %}
                        G1 E{b_to_w} Z{tb_pos[2] + b_to_w/10} F{ext_spd/10}
                        M106 S{0.5 * 255}
                        G1 E-{retract_len} Z{tb_pos[2] + b_to_w/10 + 2} F{retract_spd/10}
                    {% else %}
                        G1 E{b_to_b} Z{tb_pos[2] + b_to_b/10} F{ext_spd/10}
                        M106 S{0.5 * 255}
                        G1 E-{retract_len} Z{tb_pos[2] + b_to_b/10 + 2} F{retract_spd/10}
                    {% endif %}
                {% else %}
                    G1 E{b_to_b} Z{tb_pos[2] + b_to_w/10} F{ext_spd/10}
                    M106 S{0.5 * 255}
                    G1 E-{retract_len} Z{tb_pos[2] + b_to_w/10 + 2} F{retract_spd/10}
                {% endif %}
                G4 P1000
                G0 Y{tb_pos[1] - 5} F{tspd}
                G0 Y{tb_pos[1] - 5 - 5} Z{tb_pos[2]} F{tspd}
                G0 Y{wp_pos[1]} F{tspd / 2}
                G0 Z{wp_pos[2]} F{ztspd}
                M106 S0
                G4 P1000
                G0 X{wp_move[0]} Y{wp_move[1]} F14000
            {% endif %}

            SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=curr_lane VALUE={new_lane}
            #{% if printer["gcode_macro _TR_Variables"].saved_pos == True %}
            # Safe_Pos #отьезд головы по У ради техники безопасности изза специфики моего портала
            M106 S{printer["gcode_macro _TR_Variables"].fan_spd * 255}
            {% if x %}
                G0 Z{z_park} F{ztspd}
                G0 X{x} Y{y} F{tspd}
            {% endif %}
            G92 E0
            G1 E{retract_len} F{retract_spd}
            G92 E0
            {% if z %}
                G0 Z{z} F{ztspd}
            {% endif %}
            
            RESTORE_GCODE_STATE NAME=POST_LOAD_state

        {% endif %}
    {% endif %}

[gcode_macro Safe_Pos]
gcode:
    G91
    G0 Y-10
    G90

[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: ACTIVATE_EXTRUDER.ORIG
gcode:
    {% set ext_temp = params.EXT_TEMP|default(0) %}
    {% set new_lane = params.FILAMENT|default(1) %}
    SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=ext_temp VALUE={ext_temp}
    SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=new_lane VALUE={new_lane}
    {% set extruder = params.EXTRUDER|default('extruder')|lower|replace('extruder', '') %}
    {% if extruder == '' %}
        {% set extruder = '0' %}
    {% endif %}
    M118 Changing to extruder {extruder}
    TR_LOAD_TOOLHEAD LANE={extruder}

[delayed_gcode _LOAD_LANE]
initial_duration: 1
gcode:
    SAVE_VARIABLE VARIABLE=T0C VALUE=True
    {% if 'save_variables' not in printer %}
    {action_respond_info(
                            "CONFIG: ERROR\n"
                            "[save_variables] missing\n"
                            "This is needed to store variables to a file")}
    {% else %}
        {% if 'activelane' not in printer.save_variables.variables %}
            {action_respond_info("No TR active lane saved")}
        {% else %}
            {% set lane = printer.save_variables.variables.activelane %}
            TR_SET_ACTIVE_LANE LANE={lane}
            {action_respond_info("TR active lane is set to %d" % (lane))}
        {% endif %}
    {% endif %}

[gcode_macro TR_LOAD_TOOLHEAD]
description: Helper: Load filament on the selected lane to the toolhead
rename_existing: TR_LOAD_TOOLHEAD_ORIG
gcode:
    {% if printer.save_variables.variables.activelane == -1 %}
        TR_HOME
    {% endif %}
        TR_LOAD_TOOLHEAD_ORIG LANE={params.LANE}
        {action_respond_info("Loading %s lane" % (params.LANE))}
        M118 Loading lane {params.LANE}
        #M118 Lane change to {paramsLANE} OK
        SAVE_VARIABLE VARIABLE=activelane VALUE={params.LANE}

[gcode_macro Shape_Tip]
description: Perform tip-shaping, retraction, and cooling moves
gcode:
    SAVE_GCODE_STATE NAME=Shape_Tip_state
    Save_Pressure_Advance
    M83 # extruder relative mode lol 
    M220 S100
    SET_PRESSURE_ADVANCE ADVANCE=0
    G1 F68
    G1 E0.2816
    G1 F73
    G1 E0.3051
    G1 F83
    G1 E0.3453
    G1 F96
    G1 E0.399
    G1 F114
    G1 E0.4761
    G1 F138
    G1 E0.5767
    G1 F163
    G1 E0.5691
    G1 F162
    G1 E0.1081
    G1 F196
    G1 E0.7644
    G1 F186
    G1 E0.8248
    G1 F203
    G1 E0.8483
    G1 E-15 F6000
    G1 E-15.4 F5400
    G1 E-4.4 F2700
    G1 E-2.2 F1620
    G1 E14 F1200
    G1 E-14
    G1 E14
    G1 E-14
    G1 E14
    G1 E-14
    G1 E14
    G1 E-14
    ; SKINNYDIP START
    G1 E24 F1980
    G4 P0
    G1 E-24 F4200
    G4 P0
    ; SKINNYDIP END
    G1 F2000
    G4 S0

    Restore_Pressure_Advance
    RESTORE_GCODE_STATE NAME=Shape_Tip_state

[gcode_macro LOAD_LANE]
gcode:
    {% if 'L' in params %}
        TR_LOCATE_SELECTOR
        TR_LOAD_LANE LANE={params.L}
    {% endif %}

# [gcode_macro LOAD_TOOLHEAD]
# gcode:
#     {% if 'L' in params %}
#         TR_LOCATE_SELECTOR
#         TR_LOAD_TOOLHEAD LANE={params.L}
#     {% endif %}

[gcode_macro UNLOAD_TOOLHEAD]
gcode:
    TR_UNLOAD_TOOLHEAD
    SAVE_VARIABLE VARIABLE=activelane VALUE=-1

[gcode_macro GO_TO_LANE]
gcode:
    {% if 'L' in params %}
        TR_LOCATE_SELECTOR
        TR_GO_TO_LANE LANE={params.L}
    {% endif %}

[gcode_macro SERVO_DOWN]
gcode:
    {% set F = params.F|default(0) %}
        TR_SERVO_DOWN FORCE={F}

[gcode_macro SERVO_UP]
gcode:
    TR_SERVO_UP

[gcode_macro SET_ACTIVE_LANE]
gcode:
    {% if 'L' in params %}
        TR_SET_ACTIVE_LANE LANE={params.L}
    {% endif %}

[gcode_macro RESET_ACTIVE_LANE]
gcode:
    TR_RESET_ACTIVE_LANE

[gcode_macro LOCATE_SELECTOR]
gcode:
    TR_LOCATE_SELECTOR
