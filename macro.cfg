#[gcode_macro G1]
#rename_existing: G1.1
#gcode:
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2 
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2 
 # m117
  #RESTORE_GCODE_STATE NAME=G1
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.1 
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.1 
  #m117

[gcode_shell_command plot_graph]
command: bash /home/mrx/printer_data/config/scripts/plot_graphs.sh
timeout: 300.0
verbose: True

[delayed_gcode shutdown_host]
gcode:
     {action_call_remote_method("shutdown_machine")}
initial_duration: 0.0

[gcode_macro POWEROFF]
gcode:
# {% if printer.idle_timeout.state == 'Idle' %}
   SET_PIN pin=BTT_RELAY value=0
   UPDATE_DELAYED_GCODE ID=shutdown_host DURATION=1

[gcode_macro HEAT_CHAMBER]
gcode:
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=135
    G28
    G1 Z80 X175 Y200 F54000
    SET_FAN_SPEED FAN=bed_fans SPEED=100
    SET_PIN PIN=WS7040 VALUE=1
    M106 S153
    M84

[gcode_macro CLEAN_NOZZLE]
gcode:
    G1 X125 Y358 F54000
    G1 Z3 F7200
    G1 X60 Y358 F6000
    #G1 Z6 F3000

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
     G92 E0
     G1 E-5 F1800
     G1 F54000 X350 Y350
     G1 E-15 F800
     TURN_OFF_HEATERS
     M107
     M84
     #SET_FAN_SPEED FAN=TMC2209_fan SPEED=0
     SET_PIN PIN=WS7040 VALUE=0
     CLEAR_PAUSE
     SDCARD_RESET_FILE
     BASE_CANCEL_PRINT

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode: 
    G92 E0    
    G0 E21 F1500        
    G92 E0                                        
    RESTORE_GCODE_STATE NAME=PAUSE_STATE
    BASE_RESUME

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    G1 E-5 F1800                                                           
    G1 X175 Y1 F54000
    G1 E-15 F800

[gcode_macro _SET_PARAMS]
variable_save_params: {'retract' : 0.0,
                       'pressure_advance'  : 0.0 }
variable_params: {'temp'        : {'extruder': 245.0, 'bed': 100.0, 'chamber': 40.0, 'endstop': 0.0},
               'delta'       : {'chamber': 5.0, 'bed': 10},
               'time'        : {'soak' : 1800, 'soak_extra': 900},
               'redo_qgl'    : True,
               'prime_height': 0.0,
               'z_adjust'    : 0.0,
               'filter'      : True,
               'retract'     : '0',
               'pressure_advance' : '0'}

  #############  Store input parameters  #############
gcode:
  #{% set save_params = {'retract'           : printer['firmware_retraction'].retract_length|default(0)|float|round(2),
  {% set save_params = {'retract'           : printer['extruder'].pressure_advance|default(0)|float|round(2),
                      'pressure_advance'  : printer['extruder'].pressure_advance|default(0)|float|round(3)} %}
  {% set params = {'retract'          : params.RETRACT_LEN|default(0.35)|float|round(2),
                 'pressure_advance' : params.PRESSURE_ADVANCE|default(0.025)|float|round(3)} %}

  { action_respond_info("Saved retract: %.2f pressure_advance: %.3f" % (save_params.retract, save_params.pressure_advance)) }
  # SET_RETRACTION RETRACT_LENGTH={var.retract}
  SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={params.pressure_advance}
  { action_respond_info("Set retract: %.2f pressure_advance: %.3f" % (params.retract, params.pressure_advance)) }
  SET_GCODE_VARIABLE MACRO=_SET_PARAMS VARIABLE=save_params VALUE="{save_params}"
 
[gcode_macro _RESTORE_PARAMS]
variable_params: {'retract' : 0.0,
                       'pressure_advance'  : 0.0 }
gcode:
#  {% set params = {
#                 'retract'           : printer['gcode_macro _SET_PARAMS'].save_params.retract,
#                 'pressure_advance'  : printer['gcode_macro _SET_PARAMS'].save_params.pressure_advance } %}
  {% set params = printer['gcode_macro _SET_PARAMS'].save_params %}

  { action_respond_info("Restored retract: %.2f pressure_advance: %.3f" % (params.retract, params.pressure_advance)) }
  SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={params.pressure_advance}
  { action_respond_info("TEST: pressure_advance: %.3f" % (printer['gcode_macro _SET_PARAMS'].params.pressure_advance)) }



[gcode_macro PRINT_START]
#variable_dockprobe: true
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    #{% set dockprobe = false %}
    BED_MESH_CLEAR
    SET_PIN PIN=WS7040 VALUE=1
    SET_FAN_SPEED FAN=bed_fans SPEED=0
    M106 S0
    #SET_FAN_SPEED FAN=TMC2209_fan SPEED=0.6
    _Probe_Lock
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    #{% set dockprobe = true %}
    Dock_Probe_Unlock
    CLEAN_NOZZLE
    G0 X125 Y0 F54000
    G1 E18 F1800
    G92 E0
    G90
    G0 Z0.4
    G91
    G1 X100 E20 F3600
    G92 E0
    G90
    G1 F54000

[gcode_macro PRINT_TEST]
#variable_dockprobe: true
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    #{% set dockprobe = false %}
    BED_MESH_CLEAR
    _Probe_Lock
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    #{% set dockprobe = true %}
    Dock_Probe_Unlock
    CLEAN_NOZZLE

[gcode_macro PRINT_END]
gcode: 
     SAVE_GCODE_STATE NAME=STATE_PRINT_END
     TURN_OFF_HEATERS
     G92 E0
     G1 E-5 F1800
     G1 F54000 X350 Y350
     G1 E-15 F800
     M84
     M107
     BED_MESH_CLEAR
     SET_PIN PIN=WS7040 VALUE=0
     #SET_FAN_SPEED FAN=TMC2209_fan SPEED=0
     RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}

    _CheckProbe action=query
	G90
    Attach_Probe
    _KLICKY_STATUS_LEVELING
    SET_VELOCITY_LIMIT ACCEL=12000
    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    Dock_Probe

[gcode_macro SPEEDTEST]
gcode:
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(500)|float * 60 %}
    {% set steps = params.STEPS|default(3)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}

    {% set inset = 20.0|float %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    #{% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    #{% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    {% set minX = inset %}
    {% set minY = inset %}
    
    SAVE_GCODE_STATE NAME=speedtest_state
    G90
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400 # Wait for queue to empty
                M117 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                M118 {INTERVAL+1}/{steps} {"%4.0f mm/s" % (feedrate/60)}
                G1 F{feedrate} # set feedrate for the round
                G1 X{minX} Y{minY} # front left
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
                G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
                G1 X{minX} Y{minY} # front left
                G1 X{maxX} Y{maxY} # back right
                G1 X{maxX} Y{minY} # front right
                G1 X{minX} Y{maxY} # back left
            {% endfor %}
        {% endfor %}
    M117
    RESTORE_GCODE_STATE NAME=speedtest_state

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
description: Perform Mesh Bed Leveling with klicky automount
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_mesh_area_offset : 12
variable_probe_samples : 1
variable_min_probe_count : 3
variable_probe_count_scale_factor : 1.0
variable_enable_reference_index : False
gcode:
     {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    _CheckProbe action=query
	G90
    Attach_Probe
    _KLICKY_STATUS_MESHING
    SET_VELOCITY_LIMIT ACCEL=12000
    
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
    Dock_Probe

[gcode_macro RESONANCES_TEST_X]
description: Run input shaper test
gcode:
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                        
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro RESONANCES_TEST_Y]
description: Run input shaper test
gcode:
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                        
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
  _PRINT_AR T="BELT TEST: Mesasure B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: Mesasure A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Resonance Tests done"
  _PRINT_AR T="BELT TEST: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}


#[gcode_macro CheckProbe]
#variable_probe_state: 0
#gcode:
#    Query_Probe
#    _SetProbeState action={ params.ACTION }

#[gcode_macro ATTACH_PROBE]
#gcode:
#    {% if CheckProbe == TRIGGERED %}
#        ATTACH_PROBE1
#    {% else %}
#        M107 lol
#    {% endif %}
#[gcode_macro DETACH_PROBE]
#gcode:
#    {% if CheckProbe == open %}
#        DETACH_PROBE1
#   {% else %}
#    {% endif %}
