#[gcode_macro G1]
#rename_existing: G1.1
#gcode:
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2 
  #m117

  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2 
 # m117
  #RESTORE_GCODE_STATE NAME=G1
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.1 
  #m117
  #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.1 
  #m117
  
[save_variables]
filename: ~/printer_data/config/.variables.stb

[gcode_macro HEAT_CHAMBER]
gcode:
    {% set config = printer.configfile.config %}
    #SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET=60 HTEMP=100
    M140 S120
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% set posX = (config.stepper_x.position_max|float -
     config.stepper_x.position_min|float) / 2 %}
    {% set posY = (config.stepper_y.position_max|float -
     config.stepper_y.position_min|float) / 2 %}
    {% set posZ = config.stepper_z.position_max|float / 4 %}
    {% set trv_speed = config.printer.max_velocity|int * 60 / 2 %}
    G1 X{posX} Y{posY} Z{posZ} F{trv_speed}
    SET_FAN_SPEED FAN=bed_fans SPEED=1
    SET_PIN PIN=WS7040 VALUE=1
    # M106 S{60 * 2.55}
    # Save_pos
    # SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=saved_pos VALUE={True}
    M84
    # _RESTORE_POS EXTRA=0
    
[gcode_macro CLEAN_NOZZLE]
gcode:
    G0 X165 Y362 F72000
    G0 Z5 F7200
    {% if params.E %}
        M83
        G92 E0
        G1 E20 F1800
        G1 E80 F720
        G1 E-20 F1800
    {% endif %}
    G0 X120 F7200
    G0 X165 F7200
    G0 X120 F7200

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PRINT_END
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode: 
    G92 E0
    G1 E20 F1500
    G92 E0
    RESTORE_GCODE_STATE NAME=PAUSE_STATE
    BASE_RESUME

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set config = printer.configfile.config %}
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    BASE_PAUSE
    G1 E-5 F1800
    G0 X{(config.stepper_x.position_max|float - config.stepper_x.position_min|float) / 2} Y20 F{config.printer.max_velocity|int * 60 / 2}
    G1 E-15 F800
 
[gcode_macro PRINT_START]
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    # SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=curr_lane VALUE=0
    # SET_GCODE_VARIABLE MACRO=_TR_Variables VARIABLE=new_lane VALUE=1
    {% set BED_TEMP = params.BED_TEMP|default(80)|int %}
    {% set EXT_TEMP = params.EXT_TEMP|default(200)|int %}
    {% set CMB_TEMP = params.CMB_TEMP|default(0)|int %}
    # {% set LANE = params.LANE|default(-1)|int %}
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %} 
    {% set purge_nozzle = False %}
    # {% set bed_position =  %}
    # {% if not (0 <= LANE < printer.configfile.config['trad_rack']['lane_count']|int) %}
    #     {action_raise_error('Invalid lane')}
    # {% endif %}
    # M118 B{BED_TEMP} E{EXT_TEMP} L{LANE}
    CLEAR_PAUSE
    M140 S{BED_TEMP}
    {% if CMB_TEMP %}
        # {% if printer['temperature_fan chamber_fan'].target == 1.0 %}
        #     HEAT_CHAMBER
        # {% endif %}
        # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={CMB_TEMP}
        # TEMPERATURE_WAIT SENSOR='temperature_fan chamber_fan' MINIMUM={CMB_TEMP + 2}
        {% set sensor = printer['temperature_sensor Chamber'].temperature %}
        {% set target = CMB_TEMP + 2 %}
        {% if sensor < target %}
            HEAT_CHAMBER
            TEMPERATURE_WAIT SENSOR={sensor} MINIMUM={target}
        {% endif %}
    {% endif %}
    {% if not printer.motors_sync.applied %}
        SYNC_MOTORS
    {% endif %}
    # {% if printer.trad_rack.active_lane != LANE %}
    #     {% set purge_nozzle = True %}      
    #     M109 S{EXT_TEMP}              
    #     TR_LOAD_TOOLHEAD LANE={LANE} 
    #     G1 E-20 F1800
    # {% endif %}
    M104 S{EXT_TEMP-50}
    #TEMPERATURE_WAIT SENSOR='extruder' MINIMUM={120}
    M118 WAIT B{BED_TEMP} #E{EXT_TEMP}
    M190 S{BED_TEMP}
    #{% set dockprobe = false %}
    BED_MESH_CLEAR
    SET_PIN PIN=WS7040 VALUE=1
    M106 S0 RESET
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET=1
    # _Probe_Lock
    # RESTORE_POS
    M104 S{EXT_TEMP}
    G28 # Z # PROBE_LOCK
    # Attach_Probe_Lock
    QUAD_GANTRY_LEVEL
    # _CALIBRATE_Z #BED_POSITION={bed_position}
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default('0,0')} AREA_END={params.AREA_END|default('0,0')}
    # Dock_Probe_Unlock
    G0 X165 Y362 Z8 F72000
    # SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1
    TEMPERATURE_WAIT SENSOR='extruder' MINIMUM={EXT_TEMP-10}
    M118 WAIT E{EXT_TEMP}+-10
    {% if purge_nozzle %}
        CLEAN_NOZZLE E=1
    {% else %}
        CLEAN_NOZZLE
    {% endif %}
    PRIME_LINE

[gcode_macro PRIME_LINE]
gcode:
    G0 X125 Y5 F72000
    G1 E18 F1800
    G92 E0
    M83
    G0 Z0.4
    G91
    G1 X100 E20 F3600
    G92 E0
    G90
    G0 F72000

[gcode_macro PRINT_END]
gcode: 
    {% set config = printer.configfile.config %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    TURN_OFF_HEATERS
    G92 E0
    G1 E-5 F1800
    G0 X{config.stepper_x.position_max|float - 1} Y{config.stepper_y.position_max|float - 1} F{config.printer.max_velocity|int * 60 / 2}
    G1 E-15 F800
    M84
    M107
    BED_MESH_CLEAR
    SET_PIN PIN=WS7040 VALUE=0
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET=1
    # SET_FAN_SPEED FAN=TMC2209_fan SPEED=0
    SET_VELOCITY_LIMIT ACCEL={config.printer.max_accel}
    # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={config.printer.max_accel_to_decel}
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={config.printer.minimum_cruise_ratio}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={config.printer.square_corner_velocity}
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PRINT_TEST]
variable_xyz: 0,0,0
variable_x: 3
variable_y: 2
variable_z: 1
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    M118 {printer.configfile.settings['tmc2208 stepper_z'].run_current|float}

    # {% set x = params.X|int %}
    # M118 ^={x}
    # {% set num = 1 if x % 2 == 0 else -1 %}
    # M118 num={num}
    # {% set stepper = 'stepper_x' %}
    # {% set driver = printer['gcode_macro DETECT'].driver %}
    # M118 {driver}
    # M118 {'tmc' + driver|string + ' ' + stepper}
    # {% endif %}
    # {% set travel_distance = params.TRAVEL_DISTANCE|float %}
    # {% set minX = params.MINX|float %}
    # {% set maxX = params.MAXX|float %}
    # {% set bb = minX + travel_distance %}
    # M118 {bb|float}

    # {% if not 'xyz' in printer.toolhead.homed_axes %}
    #     G28
    # {% endif %}
    # G0 X100 Y50 Z10 F60000
    # SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=999
    # SET_VELOCITY_LIMIT ACCEL=50
    # G0 X250 F6000
    # G0 Y150 F6000
    
    # SET_VELOCITY_LIMIT ACCEL=20000
    # G0 X100 Y50 Z10 F60000
    # SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1
    # SET_VELOCITY_LIMIT ACCEL=50
    # G0 X250 F6000
    # G0 Y150 F6000

    # SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.config.printer.square_corner_velocity} 
    # SET_VELOCITY_LIMIT ACCEL={printer.configfile.config.printer.max_accel}
    # {% set Ox = printer['configfile'].config['quad_gantry_level'].points.split(',')[0]|float %}
    # {% set Oy = printer['configfile'].config['quad_gantry_level'].points.split(',')[1]|float %}
    # {% set Ox1 = printer['configfile'].config['quad_gantry_level'].points.split(',')[2]|float %}
    # {% set Oy1 = printer['configfile'].config['quad_gantry_level'].points.split(',')[3]|float %}
    # M118 {Ox,Oy,Ox1,Oy1}
    # G28
    # QUAD_GANTRY_LEVEL FAST=1
    # BED_MESH_CALIBRATE FAST=1
    # {% set Max = printer.toolhead.axis_maximum %}
    # {% set Ox = printer['configfile'].config['probe']['x_offset']|float %}
    # {% set Oy = printer['configfile'].config['probe']['y_offset']|float %}
    # {% set Cx = (Max[0] * 0.5) - Ox %}
    # {% set Cy = (Max[1] * 0.5) - Oy %}
    
    # M118 {Cx, Cy}

    #_RESTORE_POS extra={params.EXT|int|default(1)}
    
    # {% set xyz = printer.toolhead.position.x|int,printer.toolhead.position.y|int,printer.toolhead.position.z|int %}
    # SET_GCODE_VARIABLE MACRO=PRINT_TEST VARIABLE=x VALUE={xyz[0]}
    # SET_GCODE_VARIABLE MACRO=PRINT_TEST VARIABLE=y VALUE={xyz[1]}
    # SET_GCODE_VARIABLE MACRO=PRINT_TEST VARIABLE=z VALUE={xyz[2]}

    # {% set xyz = printer['gcode_macro PRINT_TEST'].x,printer['gcode_macro PRINT_TEST'].y,printer['gcode_macro PRINT_TEST'].z %}
    # M118 {xyz,xyz[0],xyz[1],xyz[2]}'F
    # M118 {printer['gcode_macro PRINT_START'].x}
    # M118 {printer['gcode_macro PRINT_START'].saved_pos}

[gcode_macro MOVE_ON_TENSION]
description:
gcode:
    {% set config = printer.configfile.config %}
    {% set x = (config.stepper_x.position_max|float -
        config.stepper_x.position_min|float) / 2 %}
    {% if 'xyz' not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G0 X{x} Y240 Z40
    M84

# [gcode_macro FLOW_RATE_TEST]
# description:
# variable_tb_pos:  177.5, 50, 0.2 # позиция стола (x,y,z)
# variable_retract: 40
# gcode:
#     {% set len = params.LEN|default(100)|int %}
#     {% set flowrate = params.FLOWRATE|default(24)|int %}
#     {% set e_speed = flowrate / (pi * 0.765625) %}
#     {% set z_len = len/20 %}
#     {% if 'xyz' not in printer.toolhead.homed_axes %}
#         G28
#     {% endif %}
#     SET_PIN PIN=WS7040 VALUE=1
#     M106 S{0.3 * 255}
#     G0 X{tb_pos[0]} Y{tb_pos[1]} Z{tb_pos[2]} F24000
#     G4 P1000
#     M83
#     G1 E{retract} F1200
#     G1 E{len} Z{tb_pos[2] + z_len} F{z_len / len * e_speed * 60} 
#     G1 E-{retract} Z{tb_pos[2] + z_len + 10} F600

# [gcode_macro THERMAL_HEAD_TEST]
# description: Test the heat of metal head
# gcode:
#     {% set target_temp = params.HEAD_TARGET_TEMP|default(200)|float %}
#     {% set trigger_temp = params.TRIGGER_TEMP|default(50)|float %}
#     {% set start_temp = printer['temperature_sensor Head'].temperature|float %}
#     M109 S{target_temp}
#     SET_PIN PIN=PUMP VALUE=1
#     SET_PIN PIN=PUMP VALUE=0
#     M118 Start Measurements
#     # UPDATE_DELAYED_GCODE ID=_TIMER DURATION=60 loop=1
#     TEMPERATURE_WAIT SENSOR='temperature_sensor Head' MINIMUM={trigger_temp + 0.5}
#     M118 Finish Measurements, temp: {start_temp} --> {target_temp} per {total_time}s
#     M104 S0

# [delayed_gcode _TIMER]
# initial_duration: 0.0
# variable_time: 0
# variable_update: 60 # sec
# gcode:
#     {% if params.DURATION %}
#         SET_GCODE_VARIABLE MACRO=_TIMER VARIABLE=update VALUE={params.DURATION|int}
#     {% endif %}
#     {% if params.LOOP %}
#         SET_GCODE_VARIABLE MACRO=_TIMER VARIABLE=time VALUE={time + update}
#         UPDATE_DELAYED_GCODE ID=_TIMER DURATION={update} loop=1
#     {% elif params.RESET %}
#         SET_GCODE_VARIABLE MACRO=_TIMER VARIABLE=time VALUE=0
#     {% else %}
#         SET_GCODE_VARIABLE MACRO=_TIMER VARIABLE=time VALUE={time + update}
#     {% endif %}

[gcode_macro PID_CALIBRATE]
rename_existing: PID_CALIBRATE_BASE
gcode:
    {% set heater = params.HEATER|default('extruder')|string|lower %}
    {% set target = params.TARGET_TEMPERATURE|default(240)|float %}
    {% set tolerance = params.TOLERANCE|default(0.005)|float %}
    {% set fan = params.FAN|default(50)|int / 100 * 255 %}
    SET_PIN PIN=WS7040 VALUE=1
    M106 S{fan}
    PID_CALIBRATE_BASE HEATER={heater} TARGET={target} TOLERANCE={tolerance}

# [gcode_macro SENSORLESS_HOME_X]
# gcode:
#     {% set HOME_CUR = 0.5 %}
#     {% set driver_config = printer.configfile.settings['tmc5160 stepper_x'] %}
#     {% set RUN_CUR = driver_config.run_current %}
#     {% set HOLD_CUR = driver_config.hold_current %}
#     SET_VELOCITY_LIMIT ACCEL=500
#     SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
#     G4 P100
#     G28 X
#     G91
#     G0 X-1 F1200
#     G90
#     SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
#     SET_VELOCITY_LIMIT ACCEL={printer.configfile.config.printer.max_accel}

# [gcode_macro SENSORLESS_HOME_Y]
# gcode:
#     {% set HOME_CUR = 0.7 %}
#     {% set driver_config = printer.configfile.settings['tmc5160 stepper_y'] %}
#     {% set RUN_CUR = driver_config.run_current %}
#     {% set HOLD_CUR = driver_config.hold_current %}
#     SET_VELOCITY_LIMIT ACCEL=500
#     SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR} HOLDCURRENT={HOME_CUR}
#     G4 P100
#     G28 Y
#     G91
#     G1 Y-1 F1200
#     G90
#     SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
#     SET_VELOCITY_LIMIT ACCEL={printer.configfile.config.printer.max_accel}

[gcode_macro SET_STEPPER_ENABLE_]
gcode:
    {% set stepper = params.STEPPER|default('stepper_x') %}
    {% set enable = params.ENABLE|default(0)|int %}
    SET_STEPPER_ENABLE STEPPER={stepper} ENABLE={enable}

[gcode_macro STEPPER_FORCE_MOVE]
gcode:
    {% set stepper = params.STEPPER|default('stepper_x') %}
    {% set dist = params.DIST|default(100) %}
    FORCE_MOVE STEPPER={stepper} DISTANCE={dist} VELOCITY=200
    M84

[gcode_macro SET_KINEMATIC_POSITION_]
gcode:
    {% set x = params.X|default(999)|float %}
    {% set y = params.Y|default(999)|float %}
    {% set z = params.Z|default(999)|float %}
    {% set config = printer.configfile.config %}
    {% if x == 999 %}
        {% set x = (config.stepper_x.position_max|float -
         config.stepper_x.position_min|float) / 2 %}
    {% endif %}
    {% if y == 999 %}
        {% set y = (config.stepper_y.position_max|float -
         config.stepper_y.position_min|float) / 2 %}
    {% endif %}
    {% if z == 999 %}
        {% set z = 0 %}
    {% endif %}
    SET_KINEMATIC_POSITION X={x} Y={y} Z={z}

[gcode_macro SET_TMC_CURRENT_]
gcode:
    {% set stepper_x_current = params.STEPPER_X_CURRENT|default('None')|string %}
    {% set stepper_x1_current = params.STEPPER_X1_CURRENT|default('None')|string %}
    {% set stepper_y_current = params.STEPPER_Y_CURRENT|default('None')|string %}
    {% set stepper_y1_current = params.STEPPER_Y1_CURRENT|default('None')|string %}
    {% set stepper_u_current = params.STEPPER_U_CURRENT|default('None')|string %}
    {% set stepper_u1_current = params.STEPPER_U1_CURRENT|default('None')|string %}
    {% set stepper_u2_current = params.STEPPER_U2_CURRENT|default('None')|string %}
    {% set stepper_u3_current = params.STEPPER_U3_CURRENT|default('None')|string %}
    {% set stepper = params.STEPPER|default('None')|string %}
    {% set current = params.CURRENT|default(1)|float %}
    {% set hold_current = params.HOLDCURRENT|default(0)|float %}

    {% set out = [] %}
    {% if stepper_x_current != 'None' %}
        {% set _ = out.append(['stepper_x', stepper_x_current]) %}
    {% endif %}
    {% if stepper_x1_current != 'None' %}
        {% set _ = out.append(['stepper_x1', stepper_x1_current]) %}
    {% endif %}
    {% if stepper_y_current != 'None' %}
        {% set _ = out.append(['stepper_y', stepper_y_current]) %}
    {% endif %}
    {% if stepper_y1_current != 'None' %}
        {% set _ = out.append(['stepper_y1', stepper_y1_current]) %}
    {% endif %}
    {% if stepper_u_current != 'None' %}
        {% set _ = out.append(['stepper_u', stepper_u_current]) %}
    {% endif %}
    {% if stepper_u1_current != 'None' %}
        {% set _ = out.append(['stepper_u1', stepper_u1_current]) %}
    {% endif %}
    {% if stepper_u2_current != 'None' %}
        {% set _ = out.append(['stepper_u2', stepper_u2_current]) %}
    {% endif %}
    {% if stepper_u3_current != 'None' %}
        {% set _ = out.append(['stepper_u3', stepper_u3_current]) %}
    {% endif %}

    {% if out %}
        {% for stepper, current in out %}
            M118 For {stepper}:
            SET_TMC_CURRENT STEPPER={stepper} CURRENT={current} HOLDCURRENT={current}
        {% endfor %}
    {% endif %}

    {% if stepper != 'None' %}
        {% if not hold_current %}
            {% set hold_current = current %}
        {% endif %}
        SET_TMC_CURRENT STEPPER={stepper} CURRENT={current} HOLDCURRENT={hold_current}
    {% endif %}

[gcode_macro SET_TMC_FIELD_]
gcode:
    {% set steppers = params.STEPPERS|default('x,y')|string|lower %}
    {% set field = params.FIELD|default('TBL') %}
    {% set value = params.FIELD_RANGE|default('None')|string %}
    {% for stepper in steppers.split(',') %}
        SET_TMC_FIELD STEPPER={stepper} FIELD={field} VALUE={value}
    {% endfor %}
    # {% set value_min = value.split('-')[0]|int %}
	# {% set value_max = value.split('-')[1]|int %}
    # {% set step = params.STEP|default(1)|int %}
    # {% set step = ((value_max - value_min + 1) / step)|int %}
    # {% set cycles = params.CYCLES|default(0)|int %}
    # {% set speed = params.SPEED|default(500)|float %} 
    # {% set accel = params.ACCEL|default(20)|float * 1000 %} 
    # {% set distance = params.DISTANCE|default(100)|int %}
    # {% set distance_repeats = params.DISTANCE_REPEATS|default(5)|int %}
    # {% set homing = params.HOMING|default('True')|string|lower %}
    # {% set max_velocity = params.MAX_VELOCITY|default(1000)|float %}
    # {% set tool = printer.toolhead %}
    # {% if cycles == 0 %}
    #     {% if stepper == 'xy' %}
    #         SET_TMC_FIELD STEPPER=stepper_x FIELD={field} VALUE={value_min}
    #         SET_TMC_FIELD STEPPER=stepper_y FIELD={field} VALUE={value_min}
    #     {% elif stepper == 'x' or stepper == 'y' %}
    #         SET_TMC_FIELD STEPPER={'stepper_' + stepper} FIELD={field} VALUE={value_min}
    #     {% elif stepper == 'e' or stepper == 'extruder' %}
    #         SET_TMC_FIELD STEPPER=extruder FIELD={field} VALUE={value_min}
    #     {% else %}
    #         {action_raise_error('WARNING!!! Unknown stepper')}
    #     {% endif %}
    # {% endif %}
    # {% if homing == 'true' or homing == '1' %}
    #     {% if not 'xy' in tool.homed_axes %}
    #         G28 X Y 
    #     {% endif %}
    #     G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2} F{printer.configfile.settings.printer.max_velocity * 60}
    # {% else %}
    #     {% if not 'xy' in tool.homed_axes %}
    #         SET_KINEMATIC_POSITION Z=0 X={tool.axis_maximum.x/2} Y={tool.axis_maximum.y/2}
    #     {% else %}
    #         G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2} F{printer.configfile.settings.printer.max_velocity * 60}
    #     {% endif %}
    # {% endif %}
    
    # {% for REPEAT in range(cycles) %}
    #     {% for INTERVAL in range(step) %}
    #         {% set value = (value_min + ( (value_max - value_min) / (step -1) ) * INTERVAL)|int %}
    #         M400
    #         M118 {field} - {value}

    #         {% if stepper == 'xy' %}
    #             SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    #             SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    #             SET_VELOCITY_LIMIT VELOCITY={max_velocity}
    #             SET_VELOCITY_LIMIT ACCEL={accel}
    #             # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    #             SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
    #             SET_TMC_FIELD STEPPER=stepper_x FIELD={field} VALUE={value}
    #             SET_TMC_FIELD STEPPER=stepper_y FIELD={field} VALUE={value}
    #             DUMP_TMC STEPPER=stepper_x REGISTER=chopconf                ; Dump TMC settings
    #             G91
    #             G0 F{speed*60}
    #             G0 X-{distance/2}
    #             {% for pizda in range(distance_repeats) %}
    #                 G0 X{distance}
    #                 G0 X-{distance}
    #             {% endfor %}
    #             G0 X{distance/2}
    #             G90
    #         {% endif %}

    #         {% if stepper == 'x' %}
    #             {% set stepper = 'stepper_' + stepper|string %}
    #             SET_STEPPER_ENABLE STEPPER={stepper} ENABLE=1
    #             SET_TMC_FIELD STEPPER={stepper} FIELD={field} VALUE={value}
    #             DUMP_TMC STEPPER={stepper} REGISTER=chopconf                ; Dump TMC settings
    #             FORCE_MOVE STEPPER={stepper} DISTANCE=-{distance/2} VELOCITY={speed} ACCEL={accel}
    #             {% for pizda in range(distance_repeats) %}
    #                 FORCE_MOVE STEPPER={stepper} DISTANCE={distance} VELOCITY={speed} ACCEL={accel}
    #                 FORCE_MOVE STEPPER={stepper} DISTANCE=-{distance} VELOCITY={speed} ACCEL={accel}
    #             {% endfor %}
    #             FORCE_MOVE STEPPER={stepper} DISTANCE={distance/2} VELOCITY={speed} ACCEL={accel}
    #         {% endif %}

    #         {% if stepper == 'y' %}
    #             {% set stepper = 'stepper_' + stepper|string %}
    #             SET_STEPPER_ENABLE STEPPER={stepper} ENABLE=1
    #             SET_TMC_FIELD STEPPER={stepper} FIELD={field} VALUE={value}
    #             DUMP_TMC STEPPER={stepper} REGISTER=chopconf                ; Dump TMC settings
    #             FORCE_MOVE STEPPER={stepper} DISTANCE=-{distance/2} VELOCITY={speed} ACCEL={accel}
    #             {% for pizda in range(distance_repeats) %}
    #                 FORCE_MOVE STEPPER={stepper} DISTANCE={distance} VELOCITY={speed} ACCEL={accel}
    #                 FORCE_MOVE STEPPER={stepper} DISTANCE=-{distance} VELOCITY={speed} ACCEL={accel}
    #             {% endfor %}
    #             FORCE_MOVE STEPPER={stepper} DISTANCE={distance/2} VELOCITY={speed} ACCEL={accel}
    #         {% endif %}
    #     {% endfor %}
    # {% endfor %}

[gcode_macro BOOST_RUN_CURRENT]
description: Save the current run current value and boost
variable_current: 0
variable_boost_current: 3.06
variable_steppers: [
    'stepper_x',
    'stepper_y',
    'stepper_x1',
    'stepper_y1',
    'stepper_u',
    'stepper_u1',
    'stepper_u2',
    'stepper_u3',
    ]
gcode:
    {% if not printer['gcode_macro BOOST_RUN_CURRENT'].current %}
        SET_GCODE_VARIABLE MACRO=BOOST_RUN_CURRENT VARIABLE=current VALUE={printer['tmc5160' + steppers[0]].run_current}
        {% for stepper in steppers %}
            SET_TMC_CURRENT STEPPER={stepper} CURRENT={boost_current} HOLDCURRENT={boost_current}
        {% endfor %}
    {% endif %}

[gcode_macro RESTORE_RUN_CURRENT]
description: Restore saved run current value
gcode:
    {% if printer['gcode_macro BOOST_RUN_CURRENT'].current %}
        {% set printer = printer.configfile.settings.printer %}
        {% set steppers = printer['gcode_macro BOOST_RUN_CURRENT'].steppers %}
        {% set current = printer['gcode_macro BOOST_RUN_CURRENT'].current %}
        {% for stepper in steppers %}
            SET_TMC_CURRENT STEPPER={stepper} CURRENT={current} HOLDCURRENT={current}
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=BOOST_RUN_CURRENT VARIABLE=current VALUE=0
        SET_VELOCITY_LIMIT VELOCITY={printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.max_accel}
        # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
        SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.minimum_cruise_ratio}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.square_corner_velocity}
    {% endif %}
    
#[gcode_macro FIRMWARE_RESTART]
#rename_existing: _FIRMWARE_RESTART
#gcode:
    #SAVE_PARAM
    #_FIRMWARE_RESTART

# [delayed_gcode _RESTORE_PARAM]
# initial_duration: 1
# gcode: 
#     _RESTORE_PARAM

[gcode_macro SAVE_PARAM]
gcode:
    #SAVE_VARIABLE VARIABLE=yep VALUE={True}
    {% if printer['tmc5160 stepper_x'].drv_status %}
        SAVE_VARIABLE VARIABLE=pos_x VALUE={printer.toolhead.position.x}
        SAVE_VARIABLE VARIABLE=pos_y VALUE={printer.toolhead.position.y}
        SAVE_VARIABLE VARIABLE=pos_z VALUE={printer.toolhead.position.z}
    {% else %}
        SAVE_VARIABLE VARIABLE=pos_x VALUE={0}
    {% endif %}
    SAVE_VARIABLE VARIABLE=ext_temp VALUE={printer.extruder.target}
    SAVE_VARIABLE VARIABLE=bed_temp VALUE={printer.heater_bed.target}
    SAVE_VARIABLE VARIABLE=cmb_temp VALUE={printer['temperature_fan Chamber_fan'].target}
    #SAVE_VARIABLE VARIABLE=led VALUE={printer['output_pin LED'].value}
    SAVE_VARIABLE VARIABLE=ws7040 VALUE={printer['output_pin WS7040'].value}
    SAVE_VARIABLE VARIABLE=fan_spd VALUE={round(printer.fan.speed,2)}

[gcode_macro _RESTORE_PARAM]
gcode:
    #{% if printer.save_variables.variables.yep %}
        {% if printer.save_variables.variables.pos_x %}
            {% set x = printer.save_variables.variables.pos_x %}
            {% set y = printer.save_variables.variables.pos_y %}
            {% set z = printer.save_variables.variables.pos_z %}
            SET_KINEMATIC_POSITION X={x} Y={y} Z={z}
            SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
            SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
        {% endif %}
        {% if params.EXTRA|default(1)|int %}
            M104 S{printer.save_variables.variables.ext_temp}
            M140 S{printer.save_variables.variables.bed_temp}
            SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber_fan TARGET={printer.save_variables.variables.cmb_temp}
            #SET_PIN PIN=LED VALUE={printer.save_variables.variables.led}
            SET_PIN PIN=WS7040 VALUE={printer.save_variables.variables.ws7040}
            M106 S{printer.save_variables.variables.fan_spd * 255}
        {% endif %}
    #{% endif %}
    #SAVE_VARIABLE VARIABLE=yep VALUE={False}

[gcode_macro RESTORE_POS]
gcode:
    {% if printer.toolhead.position.x > 0 %}
    SET_KINEMATIC_POSITION X={printer.toolhead.position.x} Y={printer.toolhead.position.y} Z={printer.toolhead.position.z}
    {% endif %}

[gcode_macro CALCULATE_OPTIMAL]
description:
gcode:
    {% set speed = params.SPEED|default('100-200')|string|lower|replace('-', ',') %}
    {% set accel = params.ACCELERATION|default('20-10')|string|lower|replace('-', ',') %}
    {% set distance = params.DISTANCE|default(100)|float %}
    {% set speed_step = 10 %}
    {% set speed_steps = (speed.split(',')[1]|int - speed.split(',')[0]|int) / speed_step %}
    {% for tmp_speed in range(speed.split(',')[0]|int, speed.split(',')[1]|int + 1, speed_step) %}
        {% set tmp_accel = accel.split(',')[0]|int - (((tmp_speed - speed.split(',')[0]|int) / speed_step ) * 
         ((accel.split(',')[0]|int - accel.split(',')[1]|int) / speed_steps)) %}
        # M118 tmp_accel = {accel.split(',')[0]|int} - ((({tmp_speed} - {speed.split(',')[0]|int}) / {speed_step} ) *
        #  (({accel.split(',')[0]|int} - {accel.split(',')[1]|int}) / {speed_steps})) = {tmp_accel} on {tmp_speed} speed
        {% set time = (tmp_speed / (tmp_accel * 1000)) + (distance / tmp_speed) %}
        {% if tmp_speed % (speed.split(',')[0]|int * 2) == 0 %}
            M118 RUNNING
        {% endif %}
        # M118 {('speed: %f mm/s, accel: %f mm/s² of distance: %f mm during %f sec'%(speed, accel * 1000, distance, time))}
        _CALCULATE__OPTIMAL_WORKFLOW speed={tmp_speed} accel={tmp_accel} distance={distance} time={time}
    {% endfor %}
    _CALCULATE__OPTIMAL_WORKFLOW out=1

[gcode_macro _CALCULATE__OPTIMAL_WORKFLOW]
description:
variable_speed: 0
variable_accel: 0
variable_distance: 0
variable_best_time: 9999
gcode:
    # M118 {time} {accel} {speed} {distance}
    {% if params.OUT %}
        {action_respond_info('Best speed: %d mm/s, best accel: %d mm/s² of distance: %d mm during %f sec'%(speed, accel * 1000, distance, best_time))}
            SET_GCODE_VARIABLE MACRO=_CALCULATE__OPTIMAL_WORKFLOW VARIABLE=best_time VALUE=9999
    {% else %}
        {% if params.TIME|float < best_time|float %}
            SET_GCODE_VARIABLE MACRO=_CALCULATE__OPTIMAL_WORKFLOW VARIABLE=speed VALUE={params.SPEED}
            SET_GCODE_VARIABLE MACRO=_CALCULATE__OPTIMAL_WORKFLOW VARIABLE=accel VALUE={params.ACCEL}
            SET_GCODE_VARIABLE MACRO=_CALCULATE__OPTIMAL_WORKFLOW VARIABLE=distance VALUE={params.DISTANCE}
            SET_GCODE_VARIABLE MACRO=_CALCULATE__OPTIMAL_WORKFLOW VARIABLE=best_time VALUE={params.TIME}
        {% endif %}
    {% endif %}

[gcode_macro SPEEDTEST]
description: Select the test model: '', line, round, slot
gcode:
    {% set fmin = params.FMIN|default(300)|float * 60 %}
    {% set fmax = params.FMAX|default(300)|float * 60 %}
    {% set steps = params.STEPS|default(1)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}
    {% set accel = params.ACCEL|default(20)|float * 1000 %}
    {% set distance = params.DISTANCE|default(100)|float %}
    {% set method = params.METHOD|default('', 'line, round, slot')|string %}
    {% set method_repeats = params.METHOD_REPEATS|default(5)|int %}
    {% set inset = params.INSET|default(50)|float %}
    {% set line_method_axis = params.LINE_METHOD_AXIS|default('x')|string %}
    {% set homing = params.HOMING|default('True')|string|lower %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
    {% set config = printer.configfile.config %}
    {% set tool = printer.toolhead %}

    {% set steppers = ['x', 'x1', 'y', 'y1', 'u', 'u1', 'u2', 'u3'] %}
    {% for name in steppers %}
        SET_STEPPER_ENABLE STEPPER=stepper_{name} ENABLE=1
    {% endfor %}
    SET_VELOCITY_LIMIT VELOCITY={fmax} ACCEL={accel}
    # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
    {% if homing == 'true' or homing == '1' %}
        {% if not 'xy' in tool.homed_axes %}
            G28 X Y 
        {% endif %}
        G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2} F{printer.configfile.settings.printer.max_velocity * 60}
    {% else %}
        {% if not 'xy' in tool.homed_axes %}
            SET_KINEMATIC_POSITION Z=0 X={tool.axis_maximum.x/2} Y={tool.axis_maximum.y/2}
        {% else %}
            G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2} F{printer.configfile.settings.printer.max_velocity * 60}
        {% endif %}
    {% endif %}

        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if fmin == fmax %}
                    {% set feedrate = fmin %}
                {% else %}
                    {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
                {% endif %}
                M400
                M117 {INTERVAL+1}/{steps} {'%4.0f mm/s' % (feedrate/60)}
                M118 {INTERVAL+1}/{steps} {'%4.0f mm/s' % (feedrate/60)}
                G0 F{feedrate}
                {% if method == '' %}
                    G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2}
                    {% for x in range(method_repeats) %}
                        G1 X{minX} Y{minY} # front left
                        G1 X{minX} Y{(maxY - minY) / 2} # mid left
                        G1 X{maxX} Y{(maxY - minY) / 2} # mid right
                        G1 X{minX} Y{(maxY - minY) / 2} # mid left
                        G1 X{minX} Y{minY} # front left
                        G1 X{maxX} Y{maxY} # back right
                        G1 X{maxX} Y{minY} # front right
                        G1 X{minX} Y{maxY} # back left
                    {% endfor %}
                    G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2}

                {% elif method == 'line' %}
                    G91
                    G0 {line_method_axis}-{distance/2}
                    {% for x in range(method_repeats) %}
                        {% if x % 10 == 0 %}
                            M118 {x} --> {method_repeats}
                        {% endif %}
                        G0 {line_method_axis}{distance}
                        G0 {line_method_axis}-{distance}
                    {% endfor %}
                    G0 {line_method_axis}{distance/2}
                    G90

                {% elif method == 'round' %}
                    {% for x in range(method_repeats) %}
                        {% if x % 10 == 0 %}
                            M118 {x} --> {method_repeats}
                        {% endif %}
                        _round100
                    {% endfor %}
                    G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2}

                {% elif method == 'slot' %}
                    {% for x in range(method_repeats) %}
                        {% if x % 10 == 0 %}
                            M118 {x} --> {method_repeats}
                        {% endif %}
                        _slot7550
                    {% endfor %}
                    G0 X{tool.axis_maximum.x/2} Y{tool.axis_maximum.y/2}
                {% endif %}
            {% endfor %}
        {% endfor %}
    {% for name in steppers %}
        SET_STEPPER_ENABLE STEPPER=stepper_{name} ENABLE=0
    {% endfor %}
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel}

[gcode_macro STABTEST_X_MOT]
description: Stability test for servos
gcode:
    {% set speed = params.SPEED|default(300)|float %}
    {% set lenght = params.LENGHT|default(150)|float %}
    {% set cycles = params.CYCLES|default(1)|int %}
    {% set accel = params.ACCEL|default(20)|float * 1000 %}
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    G4 P1500
    {% for pizda in range(cycles) %}
        FORCE_MOVE STEPPER=stepper_x DISTANCE={lenght} VELOCITY={speed} ACCEL={accel}
        FORCE_MOVE STEPPER=stepper_x DISTANCE=-{lenght} VELOCITY={speed} ACCEL={accel}
    {% endfor %}

# [gcode_macro STABTEST]
# gcode:
#     {% set speed = params.SPEED|default(300)|float %}
#     {% set lenght = params.LENGHT|default(100)|float %}
#     SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
#     SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
#     G4 P1500
#     SET_KINEMATIC_POSITION Z=0 X={printer.toolhead.axis_maximum.x/2} Y={printer.toolhead.axis_maximum.y/2}
#     G91
#     {% for pizda in range(5) %}
#         G0 X{lenght} F{speed}
#         G0 X-{lenght*2} F{speed}
#         G0 X{lenght} F{speed}
#     {% endfor %}
#     G90

# [gcode_macro VASE_TEST]
# gcode:
#     {% set fmin = params.FMIN|default(300)|float * 60 %}
#     {% set fmax = params.FMAX|default(500)|float * 60 %}
#     {% set steps = params.STEPS|default(3)|int %}
#     {% set cycles = params.CYCLES|default(1)|int %}
#     {% set inset = params.INSET|default(50)|float %}
#     {% set max_pos = printer.toolhead.axis_maximum %}
#     {% set center = [max_pos[0] / 2, max_pos[1] / 2] %}
#     {% set lines = (360)|int %} 

#     M118 Running Speed test
#     SAVE_GCODE_STATE NAME=speedtest_state
#     G90
#         {% for INTERVAL in range(steps) %}
#             {% for REPEAT in range(cycles) %}
#                 {% if fmin == fmax %}
#                     {% set feedrate = fmin %}
#                 {% else %}
#                     {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
#                 {% endif %}
#                 M400 # Wait for queue to empty
#                 M117 {INTERVAL+1}/{steps} {'%4.0f mm/s' % (feedrate/60)}
#                 M118 {INTERVAL+1}/{steps} {'%4.0f mm/s' % (feedrate/60)}
#                 G0 F{feedrate} # set feedrate for the round
#                 {% for angle in range(lines) %}
#                     {% set angle = angle * (1*pi/180) %}
#                     M118 X{(175 + round((cos(angle)),3)*-1)} Y{175 + (round((sin(angle)),3)*-1)}
#                 {% endfor %}
#             {% endfor %}
#         {% endfor %}
#     M117
#     RESTORE_GCODE_STATE NAME=speedtest_state

[gcode_macro ACCELTEST]
gcode:
    {% set speed = params.SPEED|default(200)|float %}
    {% set amin = params.AMIN|default(5)|float * 1000 %}
    {% set amax = params.AMAX|default(5)|float * 1000 %}
    {% set steps = params.STEPS|default(2)|int %}
    {% set cycles = params.CYCLES|default(1)|int %}
    {% set travel_distance = params.TRAVEL_DISTANCE|default(10)|int %}                              ; Additional travel distance
    {% set angle = params.ANGLE|default(0)|int %}                                                   ; Set custom angle
    {% set lines = (24/2)|int %}                                                                    ; Degree steps
    {% set max_pos = printer.toolhead.axis_maximum %}
    {% set center = [max_pos[0] / 2, max_pos[1] / 2] %}

    M118 Running Accel test
    SAVE_GCODE_STATE NAME=acceltest_state
    SET_VELOCITY_LIMIT ACCEL=2000
    SET_VELOCITY_LIMIT VELOCITY={speed}
    {% if not 'xy' in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}
    G0 X{center[0]} Y{center[1]} F{speed * 60}
    G91
        {% for INTERVAL in range(steps) %}
            {% for REPEAT in range(cycles) %}
                {% if amin != amax %}
                    {% set accel = amin + ( (amax - amin) / (steps -1) ) * INTERVAL %}
                {% else %}
                    {% set accel = amin %}
                {% endif %}
                {% set auto_travel_distance  = ((0.5 * accel * ((speed / accel) ** 2)) * 2) %}      ; Auto-calculate ditance from speed and acceleration
                {action_respond_info('Acceleration & deceleration zone = %f mm' % (auto_travel_distance))}
                {% set travel_distance = travel_distance + auto_travel_distance %}
                M400
                M117 {INTERVAL+1}/{steps} {'%4.0f mm/s²' % (accel)}
                M118 {INTERVAL+1}/{steps} {'%4.0f mm/s²' % (accel)}
                G0 F{speed * 60}
                SET_VELOCITY_LIMIT ACCEL={accel}
                # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
                SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
                {% if params.ANGLE %}
                    {% for i in range(lines) %}
                        {% set angle = (angle*pi/180) %}
                        G0 X{travel_distance * (round((cos(angle)),8)/2)} Y{travel_distance * (round((sin(angle)),8)/2)}
                        G0 X{travel_distance * (round((cos(angle)),8)*-1)} Y{travel_distance * (round((sin(angle)),8)*-1)}
                        G0 X{travel_distance * (round((cos(angle)),8)/2)} Y{travel_distance * (round((sin(angle)),8)/2)}
                    {% endfor %}
                {% else %}
                    {% for angle in range(lines) %}
                        {% set angle = angle * (15*pi/180) %}
                        G0 X{travel_distance * (round((cos(angle)),8)/2)} Y{travel_distance * (round((sin(angle)),8)/2)}
                        G0 X{travel_distance * (round((cos(angle)),8)*-1)} Y{travel_distance * (round((sin(angle)),8)*-1)}
                        G0 X{travel_distance * (round((cos(angle)),8)/2)} Y{travel_distance * (round((sin(angle)),8)/2)}
                    {% endfor %}
                {% endif %}
            {% endfor %}
        {% endfor %}
    G90
    RESTORE_GCODE_STATE NAME=acceltest_state

# [gcode_macro SPEEDTEST]
# gcode:
#     {% set fmin = params.FMIN|default(300)|float * 60 %}
#     {% set fmax = params.FMAX|default(500)|float * 60 %}
#     {% set steps = params.STEPS|default(3)|int %}
#     {% set cycles = params.CYCLES|default(1)|int %}
#     {% set inset = params.INSET|default(50)|float %}
#     {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
#     {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
#     {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
#     {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
#     #{% set minX = inset %}
#     #{% set minY = inset %}

#     M118 Running Speed test
#     SAVE_GCODE_STATE NAME=speedtest_state
#     G90
#         {% for INTERVAL in range(steps) %}
#             {% for REPEAT in range(cycles) %}
#                 {% if fmin == fmax %}
#                     {% set feedrate = fmin %}
#                 {% else %}
#                     {% set feedrate = fmin + ( (fmax - fmin) / (steps -1) ) * INTERVAL %}
#                 {% endif %}
#                 M400 # Wait for queue to empty
#                 M117 {INTERVAL+1}/{steps} {'%4.0f mm/s' % (feedrate/60)}
#                 M118 {INTERVAL+1}/{steps} {'%4.0f mm/s' % (feedrate/60)}
#                 G1 F{feedrate} # set feedrate for the round
#                 G1 X{minX} Y{minY} # front left
#                 G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
#                 G1 X{maxX} Y{minY + (maxY-minY)/2} # mid right
#                 G1 X{minX} Y{minY + (maxY-minY)/2} # mid left
#                 G1 X{minX} Y{minY} # front left
#                 G1 X{maxX} Y{maxY} # back right
#                 G1 X{maxX} Y{minY} # front right
#                 G1 X{minX} Y{maxY} # back left
#             {% endfor %}
#         {% endfor %}
#     RESTORE_GCODE_STATE NAME=speedtest_state

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
variable_accel: 1600
variable_speed: 1600
gcode:
    {% if params.FAST|default(0) %}
        BOOST_RUN_CURRENT
        {% set Ox = printer['configfile'].config['quad_gantry_level'].points.split(',')[0]|float %}
        {% set Oy = printer['configfile'].config['quad_gantry_level'].points.split(',')[1]|float %}
        G0 X{Ox} Y{34} F60000
        SET_VELOCITY_LIMIT VELOCITY={speed}
        SET_VELOCITY_LIMIT ACCEL={accel}
        # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
        SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=30
    {% endif %}
    _QUAD_GANTRY_LEVEL
    {% if params.FAST|default(0) %}
        {% set printer = printer.configfile.settings.printer %}
        SET_VELOCITY_LIMIT VELOCITY={printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.max_accel}
        # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.max_accel_to_decel}
        SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.minimum_cruise_ratio}
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
description: Perform Mesh Bed Leveling with klicky automount
variable_parameter_AREA_START: 0,0
variable_parameter_AREA_END: 0,0
variable_speed: 2500
variable_accel: 40000
variable_corner: 30
variable_mesh_area_offset: 12
variable_probe_samples: 1
variable_min_probe_count: 3
variable_probe_count_scale_factor: 1.0
variable_enable_reference_index: False
gcode:
    # {% set move_accel = printer['gcode_macro _User_Variables'].move_accel|default(10000) %}
    # {% set V = printer['gcode_macro _User_Variables'].verbose %}
    # {% if V %}
    #     { action_respond_info('Bed Mesh Calibrate') }
    # {% endif %}

    # # Attach_Probe_Lock
    # # {% if not printer.quad_gantry_level.applied %}
    # #     QUAD_GANTRY_LEVEL
    # # {% endif %}

    # # _CheckProbe action=query
	# G90
    # Attach_Probe
    # _KLICKY_STATUS_MESHING
    # SET_VELOCITY_LIMIT ACCEL={move_accel}
    {% if params.FAST|default(0) %}
        {% set Ox = printer.configfile.config['bed_mesh'].mesh_min.split(',')[0]|float - printer.configfile.config['idm']['x_offset']|float %}
        {% set Oy = printerconfigfile.config['bed_mesh'].mesh_min.split(',')[1]|float - printer.configfile.config['idm']['y_offset']|float %}
        {% set base_speed = printer.configfile.settings.printer.max_velocity|float %}
        {% set speed = params.SPEED|float %}
        {% set accel = params.ACCEL|float %}
        {% set corner = params.CORNER|float %}
        SET_VELOCITY_LIMIT ACCEL={accel}
        # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
        SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner}
    {% endif %}

    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer['configfile'].config['bed_mesh'] %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(',')[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(',')[1]|float %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(',')[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(',')[1]|float %}

        {% set area_min_x = params.AREA_START.split(',')[0]|float %}
	{% set area_min_y = params.AREA_START.split(',')[1]|float %}
	{% set area_max_x = params.AREA_END.split(',')[0]|float %}
	{% set area_max_y = params.AREA_END.split(',')[1]|float %}

	{% if bedMeshConfig.probe_count.split(',')|length == 2 %}
        {% set meshPointX = bedMeshConfig.probe_count.split(',')[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(',')[1]|int %}
    {% else %}
        {% set meshPointX = bedMeshConfig.probe_count.split(',')[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(',')[0]|int %}
    {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}

        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = 'lagrange' %}
            {% if 'algorithm' in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            # {% if enable_reference_index %}
            #     {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
            #     BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            # {% else %}
                {% if params.FAST|default(0) %}
                    BOOST_RUN_CURRENT
                    G0 X{area_min_x} Y{area_min_y} F{base_speed}
                    SET_VELOCITY_LIMIT VELOCITY={speed}
                {% endif %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            # {% endif %}
        {% else %}
            {% if params.FAST|default(0) %}
                BOOST_RUN_CURRENT
                G0 X{Ox} Y{Oy} F{base_speed}
                SET_VELOCITY_LIMIT VELOCITY={speed}
            {% endif %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        {% if params.FAST|default(0) %}
            BOOST_RUN_CURRENT
            G0 X{Ox} Y{Oy} F{base_speed}
            SET_VELOCITY_LIMIT VELOCITY={speed}
        {% endif %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
    # Dock_Probe
    {% if params.FAST|default(0) %}
        RESTORE_RUN_CURRENT
        {% set printer = printer.configfile.settings.printer %}
        SET_VELOCITY_LIMIT VELOCITY={printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.max_accel}
        # SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.max_accel_to_decel}
        SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.minimum_cruise_ratio}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.square_corner_velocity}
    {% endif %}

[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[delayed_gcode SHUTDOWN_HOST]
initial_duration: 0.0
gcode:
    {action_call_remote_method('shutdown_machine')}

[gcode_macro POWEROFF]
gcode:
    # {% if printer.idle_timeout.state == 'Idle' %}
    # SAVE_PARAM
    SET_PIN pin=BTT_RELAY value=0
    UPDATE_DELAYED_GCODE ID=SHUTDOWN_HOST DURATION=1

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro SAVE_PRESSURE_ADVANCE]
description: Save the current pressure advance value
variable_pa: -1
gcode:
    {% set pa = printer.extruder.pressure_advance %}
    {% if pa > 0 %}
        SET_GCODE_VARIABLE MACRO=SAVE_PRESSURE_ADVANCE VARIABLE=pa VALUE={pa}
    {% endif %}

[gcode_macro RESTORE_PRESSURE_ADVANCE]
description: Restore saved pressure advance value
gcode:
    {% if not (printer['gcode_macro SAVE_PRESSURE_ADVANCE'].pa == -1) %}
        SET_PRESSURE_ADVANCE ADVANCE={printer['gcode_macro SAVE_PRESSURE_ADVANCE'].pa}
    {% endif %}

[gcode_macro M106]
rename_existing: M106.1
description: Set and limit fan speed to cfg value. fixspeed should be set to -1 to disable
variable_minspeed: 0
variable_maxspeed: 255
variable_fixspeed: -1
variable_currentspeed: 0
variable_multiplier: 1.0
gcode:
    {% set nospeed = True %}
    {% if 'S' in params %}
        {% set nospeed = False %}
    {% endif %}

    {% if 'F' in params %}
        {% set fixspeed = params.F|int * 2.56 %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fixspeed VALUE={fixspeed}
    {% endif %}

    {% if 'MIN' in params %}
        {% set minspeed = params.MIN|int * 2.56 %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=minspeed VALUE={minspeed}
        {% if nospeed and (fixspeed < 0) %}
            {% set speed = currentspeed * multiplier %}
            {% if speed < minspeed %}
            M106.1 S{minspeed}
            {% else %}
            M106.1 S{speed}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if 'MAX' in params %}
        {% set maxspeed = params.MAX|int * 2.56 %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=maxspeed VALUE={maxspeed}
        {% if nospeed and (fixspeed < 0) %}
            {% set speed = currentspeed * multiplier %}
            {% if speed > maxspeed %}
            M106.1 S{maxspeed}
            {% else %}
            M106.1 S{speed}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if 'MUL' in params %}
        {% set multiplier = params.MUL|float %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=multiplier VALUE={multiplier}
        {% if nospeed and (fixspeed < 0) %}
            {% set speed = currentspeed * multiplier %}
            {% if speed < minspeed %}
            M106.1 S{minspeed}
            {% elif speed > maxspeed %}
            M106.1 S{maxspeed}
            {% else %}
            M106.1 S{speed}
            {% endif %}
        {% endif %}
    {% endif %}

    {% if 'RESET' in params %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=minspeed VALUE=0
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=maxspeed VALUE=255
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fixspeed VALUE=-1
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=multiplier VALUE=1.0
        M106.1 S{currentspeed}
    {% endif %}

    {% if fixspeed >= 0 %}
        M106.1 S{fixspeed}
    {% elif 'S' in params %}
        {% set speed = params.S|default(0)|int %}
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=currentspeed VALUE={speed}
        {% set speed = speed * multiplier %}
        {% if speed > 0 %}
            {% if speed < minspeed %}
                M106.1 S{minspeed}
            {% elif speed > maxspeed %}
                M106.1 S{maxspeed}
            {% else %}
                M106.1 S{speed}
            {% endif %}
        {% else %}
            M106.1 S0
        {% endif %}
    {% endif %}

[gcode_macro G1]
rename_existing: G1000
description: Automatic control of toolhead speedup
variable_activated: False
variable_debug_out: True
variable_act_speed: 0.
variable_act_accel: 0.
variable_act_scv: 0.
variable_trig_speed: 1000.
variable_safe_accel_scv: 
    [10000, 5]
variable_excl_accel_scv: {
     220: [15000, 5.],
     450: [15000, 30.],
    }
variable_scale_accel_scv: {
     100: [50000, 30.],
     200: [50000, 30.],
     300: [50000, 30.],
     400: [50000, 30.],
     500: [50000, 30.],
     600: [50000, 30.],
     700: [50000, 30.],
     800: [50000, 30.],
     900: [50000, 30.],
    1000: [50000, 30.],
    1100: [50000, 30.],
    1200: [47000, 30.],
    1300: [42000, 30.],
    1400: [30000, 30.],
    1500: [26000, 30.],
    1600: [25000, 30.],
    1700: [20000, 30.],
    1800: [16000, 30.],
    1900: [13000, 30.],
    2000: [10000, 30.],
    }
gcode:
    {% if activated %}
        {% set new_speed = params.F|default(0)|float %}
        {% if new_speed %}
            {% set out = [] %}
            {% for p in params %}
                {% if p == 'F' %}
                    ; Find speeds and scaling accels in travel move
                    {% set new_speed_mms = new_speed / 60 %}
                    {% if trig_speed == new_speed_mms %}
                        {% set finder = [[0, 999999.0]] %}
                        {% set x, y = printer.toolhead.position.x, printer.toolhead.position.y %}
                        {% if printer['gcode_move'].absolute_coordinates %}
                            {% set dist = ((params.X|default(x)|float - x)**2 +
                             (params.Y|default(y)|float - y)**2)**0.5 %}
                        {% else %}
                            {% set dist = ((params.X|default(0)|float)**2 +
                             (params.Y|default(0)|float)**2)**0.5 %}
                        {% endif %}
                        {% if dist %}
                            {% for speed in scale_accel_scv.keys() %}
                                {% set accel, scv = scale_accel_scv[speed] %}
                                {% set time = (speed / accel) + (dist / speed) %}
                                {% if time < finder[-1][1] %}
                                    {% set _ = finder.append([speed, time]) %}
                                {% endif %}
                            {% endfor %}
                            {% set new_speed_mms, time = finder[-1] %}
                            {% set new_speed = new_speed_mms * 60 %}
                        {% else %}
                            {% set time = 0 %}
                        {% endif %}
                        {% set new_accel, new_scv = scale_accel_scv[new_speed_mms] %}
                        {% if debug_out %}
                            {action_respond_info('New travel speed: %s mm/s,'
                            ' accel: %s mm/s² of dist: %.3f mm during %.3f sec'%
                                (new_speed_mms, new_accel, dist, time))}
                        {% endif %}
                    ; Scaling accels on speed
                    {% elif new_speed != act_speed %}
                        {% set finder = [] %}
                        {% for key in excl_accel_scv.keys() %}
                            {% set key = key|int %}
                            {% if key == new_speed_mms %}
                                {% set _ = finder.append(key) %}
                            {% endif %}
                        {% endfor %}
                        {% if finder %}
                            {% set new_accel, new_scv = excl_accel_scv[finder[0]] %}
                        {% else %}
                            {% for key in scale_accel_scv.keys() %}
                                {% set key = key|int %}
                                {% if key >= new_speed_mms %}
                                    {% set _ = finder.append(key) %}
                                {% endif %}
                            {% endfor %}
                            {% if finder %}
                                {% set new_accel, new_scv = scale_accel_scv[finder|min] %}
                            {% else %}
                                {% set new_accel, new_scv = safe_accel_scv %}
                                {action_respond_info('WARNING!!! Empty accel dict, applying'
                                ' safe accel: %s mm/s^2, scv: %s mm/s' % (new_accel, new_scv))}
                            {% endif %}
                        {% endif %}
                    {% endif %}

                    {% if new_speed != act_speed %} 
                        {% set _ = out.append('F%s'%(new_speed)) %}
                        SET_GCODE_VARIABLE MACRO=G1 VARIABLE=act_speed VALUE={new_speed}
                        {% if new_accel != act_accel or new_scv != act_scv %}
                            {% if debug_out %}
                                {action_respond_info('F%s, accel: %s --> %s mm/s^2, scv: %s --> %s'
                                ' mm/s' % (new_speed, act_accel, new_accel, act_scv, new_scv))}
                            {% endif %}
                            {% if new_accel != act_accel %}
                                SET_GCODE_VARIABLE MACRO=G1 VARIABLE=act_accel VALUE={new_accel}
                                SET_VELOCITY_LIMIT ACCEL={new_accel}   
                            {% endif %}
                            {% if new_scv != act_scv %}
                                SET_GCODE_VARIABLE MACRO=G1 VARIABLE=act_scv VALUE={new_scv}
                                SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={new_scv}   
                            {% endif %}
                        {% endif %}
                    {% endif %}

                {% elif p != 'G' %}
                    {% set _ = out.append('%s%s'%(p, params[p])) %}
                {% endif %}
            {% endfor %}
            G1000 {out|join(' ')}
        {% else %}
            {% if act_accel and act_accel != printer['toolhead'].max_accel
            and printer['toolhead'].max_accel != printer.configfile.config.printer.max_accel %}
                M118 WARNING!!! External change of accels, applying safe value: {act_accel} mm/s^2
                SET_VELOCITY_LIMIT ACCEL={act_accel}
            {% endif %}
            {% if act_scv and act_scv != printer['toolhead'].square_corner_velocity
            and printer['toolhead'].square_corner_velocity != 
            printer.configfile.settings.printer.square_corner_velocity %}
                M118 WARNING!!! External change of SCV, applying safe value: {act_scvl} mm/s
                SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={act_scvl}
            {% endif %}
            G1000 {rawparams}
        {% endif %}
    {% else %}
        G1000 {rawparams}
    {% endif %}

# [gcode_macro G0]
# rename_existing: G0000
# description: plug
# gcode:
#     G1 {rawparams}

# [gcode_macro G2]
# rename_existing: G2000
# description: plug
# gcode:
#     {% if params.F %}
#         {% set out = [] %}
#         {% for p in params %}
#             {% if p == 'F' %}
#                 G1 {p}{params[p]}
#             {% else %}
#                 {% set _ = out.append('%s%s'%(p, params[p])) %}
#             {% endif %}
#         {% endfor %}
#         G2000 {out|join(' ')}
#     {% else %}
#         G2000 {rawparams}
#     {% endif %}

# [gcode_macro G3]
# rename_existing: G3000
# description: plug
# gcode:
#     {% if params.F %}
#         {% set out = [] %}
#         {% for p in params %}
#             {% if p == 'F' %}
#                 G1 {p}{params[p]}
#             {% else %}
#                 {% set _ = out.append('%s%s'%(p, params[p])) %}
#             {% endif %}
#         {% endfor %}
#         G3000 {out|join(' ')}
#     {% else %}
#         G3000 {rawparams}
#     {% endif %}

# [gcode_macro M204]
# rename_existing: M204000
# description: plug
# gcode:

[gcode_macro SET_VELOCITY_LIMIT]
rename_existing: SET_VELOCITY_LIMIT_BASE
description:
variable_now: ''
variable_outer: [15000, 5, 0.025]
variable_inner: [50000, 30, 0.015]
gcode:
    {% set check = False %}
    {% if params.OUTER %}
        {% set check = True %}
        SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=outer VALUE={params.OUTER}
    {% elif params.INNER %}
        {% set check = True %}
        SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=inner VALUE={params.INNER}
    {% elif not params %}
        M118 Now: {now}: {printer['gcode_macro SET_VELOCITY_LIMIT'][now]}
    {% endif %}
    {% if params.SECTOR or check %}
        {% set macro = printer['gcode_macro SET_VELOCITY_LIMIT'] %}
        {% if params.SECTOR %}
            {% set sector = params.SECTOR %}
        {% else %}
            {% set sector = now %}
        {% endif %}
        {% if macro[sector] %}
            {% if now != sector or check %}
                SET_VELOCITY_LIMIT_BASE ACCEL={macro[sector][0]}
                SET_VELOCITY_LIMIT_BASE SQUARE_CORNER_VELOCITY={macro[sector][1]}
                SET_PRESSURE_ADVANCE ADVANCE={macro[sector][2]}
                SET_GCODE_VARIABLE MACRO=SET_VELOCITY_LIMIT VARIABLE=now VALUE='"{sector}"'
            {% endif %}
        {% else %}
            M118 Unknown sector: {sector}
        {% endif %}
    {% else %}
        SET_VELOCITY_LIMIT_BASE {rawparams}
    {% endif %}

# [gcode_macro RESONANCES_TEST]
# description: Run input shaper test
# gcode:
#     {% set X = params.X|default(1)|int %}
#     {% set Y = params.Y|default(1)|int %}
#     {% set min_freq = params.FREQ_START|default(5)|float %}
#     {% set max_freq = params.FREQ_END|default(133.3)|float %}
#     {% set hz_per_sec = params.HZ_PER_SEC|default(1)|int %}
#     {% set chip_name = params.ACCELEROMETER|default(printer.configfile.settings.resonance_tester.accel_chip) %}
#     {% set input_shaping = params.INPUT_SHAPING|default(0)|int %}
#     {% if not 'xyz' in printer.toolhead.homed_axes %}
#         G28
#     {% endif %}
#     M118 INPUT SHAPER: Noise values, check if sensor is installed
#     MEASURE_AXES_NOISE
#     M118 INPUT SHAPER: Resonance Tests starting
#     {% if X %}
#         M118 INPUT SHAPER: Mesasure X axis
#         TEST_RESONANCES AXIS=X FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec} CHIPS={chip_name} INPUT_SHAPING={input_shaping} #POINT={def_xyz_points[0]},{def_xyz_points[1]},{def_xyz_points[2]}
#     {% endif %}
#     {% if Y %}
#         M118 INPUT SHAPER: Mesasure Y axis
#         TEST_RESONANCES AXIS=Y FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec} CHIPS={chip_name} INPUT_SHAPING={input_shaping} #POINT={def_xyz_points[0]},{def_xyz_points[1]},{def_xyz_points[2]}
#     {% endif %}
#     M118 INPUT SHAPER: Resonance Tests done
#     M118 INPUT SHAPER: Generate graph in backround
#     RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

# [gcode_macro BELT_TEST]
# description: Run resonance test to analyze belts
# gcode:
#     M118 BELT TEST: Noise values, check if sensor is installed
#     MEASURE_AXES_NOISE
#     M118 BELT TEST: Resonance Tests starting ...
#     M118 BELT TEST: Mesasure B belt
#     TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
#     M118 BELT TEST: Mesasure A belt
#     TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
#     M118 BELT TEST: Resonance Tests done
#     M118 BELT TEST: Generate graph in backround
#     RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[gcode_macro RESONANCES_TEST]
description: Run standard input shaper test for all axes
gcode:
    {% set axis = params.AXIS|default('xy')|string|lower %} 
    {% set min_freq = params.FREQ_START|default(5)|float %}
    {% set max_freq = params.FREQ_END|default(133.3)|float %}
    {% set accel_per_hz = params.ACCEL_PER_HZ|default(100)|float %} 
    {% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}
    {% set chip_name = params.ACCELEROMETER|default('mpu9250')|string|lower %}
    {% set input_shaping = params.INPUT_SHAPING|default(0)|int %}
    {% set run_shell = params.RUN_SHELL_COMMAND|default(1)|int %}
    # {% set xyz_points = params.POINTS|default(0,0,0)|float %}
    # {% set def_xyz_points = printer.toolhead.axis_maximum.x/2,printer.toolhead.axis_maximum.y/2,20 %}
    # {% if xyz_points[0] == 0 %}
    #     {% set xyz_points = def_xyz_points %} 
    # {% endif %}
    
    {% set X, Y = False, False %}
    {% if axis == 'xy' %}
        {% set X, Y = True, True %}
    {% elif axis == 'x' %}
        {% set X = True %}
    {% elif axis == 'y' %}
        {% set Y = True %}
    {% endif %}
    RUN_SHELL_COMMAND CMD=cleaner
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
    {% if X %}
        TEST_RESONANCES AXIS=X OUTPUT=raw_data NAME=x FREQ_START={min_freq} FREQ_END={max_freq} ACCEL_PER_HZ={accel_per_hz} HZ_PER_SEC={hz_per_sec} INPUT_SHAPING={input_shaping} CHIPS={chip_name} #POINT={def_xyz_points[0]},{def_xyz_points[1]},{def_xyz_points[2]}
        M400
        {% if run_shell %}
            M118 X axis shaper graphs generation...
            RUN_SHELL_COMMAND CMD=plot_graph PARAMS='SHAPER accel_per_hz={accel_per_hz}'
        {% endif %}
    {% endif %}

    {% if Y %}
        TEST_RESONANCES AXIS=Y OUTPUT=raw_data NAME=y FREQ_START={min_freq} FREQ_END={max_freq} ACCEL_PER_HZ={accel_per_hz} HZ_PER_SEC={hz_per_sec} INPUT_SHAPING={input_shaping} CHIPS={chip_name} #POINT={def_xyz_points[0]},{def_xyz_points[1]},{def_xyz_points[2]}
        M400
        {% if run_shell %}
            M118 Y axis shaper graphs generation...
            RUN_SHELL_COMMAND CMD=plot_graph PARAMS='SHAPER accel_per_hz={accel_per_hz}'
        {% endif %}
    {% endif %}

# [gcode_macro BELTS_SHAPER_CALIBRATION]
# description: Run custom demi-axe test to analyze belts on CoreXY printers
# gcode:
#     {% set verbose = params.VERBOSE|default(true) %}
#     {% set min_freq = params.FREQ_START|default(5)|float %}
#     {% set max_freq = params.FREQ_END|default(133.33)|float %}
#     {% set hz_per_sec = params.HZ_PER_SEC|default(1)|float %}

#     TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
#     M400
#     TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a FREQ_START={min_freq} FREQ_END={max_freq} HZ_PER_SEC={hz_per_sec}
#     M400

#     {% if verbose %}
#         RESPOND MSG='Belts graphs generation...'
#     {% endif %}
#     RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS

[gcode_macro EXCITATE_AXIS_AT_FREQ]
description: Maintain a specified input shaper excitating frequency for some time to diagnose vibrations
gcode:
    {% set FREQUENCY = params.FREQUENCY|default(25)|int %}
    {% set TIME = params.TIME|default(10)|int %}
    {% set accel_per_hz = params.ACCEL_PER_HZ|default(100)|float %} 
    {% set AXIS = params.AXIS|default('x')|string|lower %}

    TEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} ACCEL_PER_HZ={accel_per_hz} HZ_PER_SEC={1/(TIME/3)} 
    M400

# Use:
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
    {% set config = True if params.C or params.S else False %}
    {% set path = 'config' if params.C 
           else 'settings' if params.S %}
    {% set search = params.C if params.C
               else params.S if params.S
               else params.P if params.P %}
    {% set out = [] %}
    {% for name1 in printer|sort %}
        {% if config %} ; print the searched printer.configfile[path] parameter
        {% if name1 is in ['configfile'] %}
            {% for name2 in printer[name1][path]|sort %}
                {% if name2 is in [search] %}
                    {% for name3, value in printer[name1][path][name2].items()|sort %}
                        {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                                    (path, name2, name3, value)) %}
                    {% endfor %}
                {% endif %}
            {% endfor %}
        {% endif %}
        {% else %}
        {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
            {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
                {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
            {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
                {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
            {% endif %}
        {% endfor %}
        {% endif %}
    {% endfor %}
    {% if out|length > 0 %}
        {action_respond_info(out|join('\n'))}
    {% else %}
        {action_respond_info('Nothing found for \'DUMP_PARAMETER %s\'' % rawparams)}
    {% endif %}

[gcode_macro DUMP_SENSORS]
gcode:
    {action_respond_info(printer.heaters.available_heaters|join(', '))}
    {action_respond_info(printer.heaters.available_sensors|join(', '))}

[gcode_macro DUMP_WARNINGS]
description = Debug: Print all warning messages from klipper
gcode = 
	{% set parameters = ["printer.configfile.warnings:"] %}
	{% for warning in printer.configfile.warnings %}
	    {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
	{% endfor %}
	{action_respond_info(parameters|join("\n"))}

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
    {% set min = printer.toolhead.axis_minimum %}
    {% set max = printer.toolhead.axis_maximum %}
    {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
                           'y' : printer.configfile.settings.probe.y_offset} %}
    {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
                                  'y' : [min.y,(min.y-probe_offset.y)]|max},
                         'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
                                  'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
    {action_respond_info('Print Volume Limits:
                            Min X:%7.1f, Y:%7.1f, Z:%7.1f
                            Max X:%7.1f, Y:%7.1f, Z:%7.1f
                            Probe Area Limits:
                            Min X:%7.1f, Y:%7.1f
                            Max X:%7.1f, Y:%7.1f' % 
        (min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

[gcode_macro _round100]
description: 100mm diameter round 1 pass
gcode:
    G1 X173.965 Y225.465
    G1 X171.33 Y225.211
    G1 X169.592 Y224.959
    G1 X168.716 Y224.817
    G1 X167.844 Y224.651
    G1 X166.124 Y224.293
    G1 X164.402 Y223.864
    G1 X162.716 Y223.372
    G1 X161.868 Y223.105
    G1 X160.193 Y222.536
    G1 X158.548 Y221.896
    G1 X157.735 Y221.564
    G1 X156.931 Y221.21
    G1 X155.327 Y220.462
    G1 X154.533 Y220.066
    G1 X152.968 Y219.243
    G1 X150.686 Y217.898
    G1 X148.48 Y216.437
    G1 X147.063 Y215.399
    G1 X146.359 Y214.859
    G1 X144.992 Y213.751
    G1 X144.316 Y213.174
    G1 X143.008 Y211.997
    G1 X142.361 Y211.388
    G1 X141.731 Y210.763
    G1 X140.505 Y209.505
    G1 X139.326 Y208.184
    G1 X138.754 Y207.52
    G1 X138.189 Y206.835
    G1 X137.638 Y206.136
    G1 X136.579 Y204.731
    G1 X136.07 Y204.017
    G1 X135.079 Y202.548
    G1 X134.603 Y201.8
    G1 X133.686 Y200.289
    G1 X132.423 Y197.963
    G1 X131.66 Y196.38
    G1 X131.288 Y195.574
    G1 X130.934 Y194.759
    G1 X130.602 Y193.948
    G1 X129.964 Y192.309
    G1 X129.395 Y190.632
    G1 X129.128 Y189.784
    G1 X128.634 Y188.089
    G1 X128.207 Y186.376
    G1 X127.841 Y184.657
    G1 X127.542 Y182.917
    G1 X127.407 Y182.039
    G1 X127.291 Y181.158
    G1 X127.196 Y180.287
    G1 X127.034 Y178.525
    G1 X126.942 Y176.77
    G1 X126.919 Y174.124
    G1 X127.035 Y171.465
    G1 X127.289 Y168.83
    G1 X127.541 Y167.092
    G1 X127.683 Y166.216
    G1 X127.849 Y165.344
    G1 X128.207 Y163.624
    G1 X128.636 Y161.902
    G1 X129.128 Y160.216
    G1 X129.395 Y159.368
    G1 X129.964 Y157.693
    G1 X130.604 Y156.048
    G1 X130.936 Y155.235
    G1 X131.29 Y154.431
    G1 X132.038 Y152.827
    G1 X132.434 Y152.033
    G1 X133.257 Y150.468
    G1 X134.602 Y148.186
    G1 X136.063 Y145.98
    G1 X137.101 Y144.563
    G1 X137.641 Y143.859
    G1 X138.749 Y142.492
    G1 X139.326 Y141.816
    G1 X140.503 Y140.508
    G1 X141.112 Y139.861
    G1 X141.737 Y139.231
    G1 X142.995 Y138.005
    G1 X144.316 Y136.826
    G1 X144.98 Y136.254
    G1 X145.665 Y135.689
    G1 X146.364 Y135.138
    G1 X147.769 Y134.079
    G1 X148.483 Y133.57
    G1 X149.952 Y132.579
    G1 X150.7 Y132.103
    G1 X152.211 Y131.186
    G1 X154.537 Y129.923
    G1 X156.12 Y129.16
    G1 X156.926 Y128.788
    G1 X157.741 Y128.434
    G1 X158.552 Y128.102
    G1 X160.191 Y127.464
    G1 X161.868 Y126.895
    G1 X162.716 Y126.628
    G1 X164.411 Y126.134
    G1 X166.124 Y125.707
    G1 X167.843 Y125.341
    G1 X169.583 Y125.042
    G1 X170.461 Y124.907
    G1 X171.342 Y124.791
    G1 X172.213 Y124.696
    G1 X173.975 Y124.534
    G1 X175.739 Y124.442
    G1 X177.496 Y124.427
    G1 X178.389 Y124.43
    G1 X179.266 Y124.45
    G1 X181.035 Y124.542
    G1 X181.91 Y124.611
    G1 X183.659 Y124.787
    G1 X185.408 Y125.041
    G1 X186.284 Y125.183
    G1 X187.156 Y125.349
    G1 X188.876 Y125.707
    G1 X190.598 Y126.136
    G1 X192.284 Y126.628
    G1 X193.132 Y126.895
    G1 X194.807 Y127.464
    G1 X196.452 Y128.104
    G1 X197.265 Y128.436
    G1 X198.069 Y128.79
    G1 X199.673 Y129.538
    G1 X200.467 Y129.934
    G1 X202.032 Y130.757
    G1 X204.314 Y132.102
    G1 X206.52 Y133.563
    G1 X207.937 Y134.601
    G1 X208.641 Y135.141
    G1 X210.008 Y136.249
    G1 X210.684 Y136.826
    G1 X211.992 Y138.003
    G1 X212.639 Y138.612
    G1 X213.269 Y139.237
    G1 X214.495 Y140.495
    G1 X215.674 Y141.816
    G1 X216.246 Y142.48
    G1 X216.811 Y143.165
    G1 X217.362 Y143.864
    G1 X218.421 Y145.269
    G1 X218.93 Y145.983
    G1 X219.921 Y147.452
    G1 X220.397 Y148.2
    G1 X221.314 Y149.711
    G1 X222.577 Y152.037
    G1 X223.34 Y153.62
    G1 X223.712 Y154.426
    G1 X224.066 Y155.241
    G1 X224.398 Y156.052
    G1 X225.036 Y157.691
    G1 X225.605 Y159.368
    G1 X225.872 Y160.216
    G1 X226.366 Y161.911
    G1 X226.793 Y163.624
    G1 X227.159 Y165.343
    G1 X227.458 Y167.083
    G1 X227.593 Y167.961
    G1 X227.709 Y168.842
    G1 X227.804 Y169.713
    G1 X227.966 Y171.475
    G1 X228.058 Y173.241
    G1 X228.081 Y175.883
    G1 X227.965 Y178.535
    G1 X227.711 Y181.17
    G1 X227.459 Y182.908
    G1 X227.317 Y183.784
    G1 X227.151 Y184.656
    G1 X226.793 Y186.376
    G1 X226.364 Y188.098
    G1 X225.872 Y189.784
    G1 X225.605 Y190.632
    G1 X225.036 Y192.307
    G1 X224.396 Y193.952
    G1 X224.064 Y194.765
    G1 X223.71 Y195.569
    G1 X222.962 Y197.173
    G1 X222.566 Y197.967
    G1 X221.743 Y199.532
    G1 X220.398 Y201.814
    G1 X218.937 Y204.02
    G1 X217.899 Y205.437
    G1 X217.359 Y206.141
    G1 X216.251 Y207.508
    G1 X215.674 Y208.184
    G1 X214.497 Y209.492
    G1 X213.888 Y210.139
    G1 X213.263 Y210.769
    G1 X212.005 Y211.995
    G1 X210.684 Y213.174
    G1 X210.02 Y213.746
    G1 X209.335 Y214.311
    G1 X208.636 Y214.862
    G1 X207.231 Y215.921
    G1 X206.517 Y216.43
    G1 X205.048 Y217.421
    G1 X204.3 Y217.897
    G1 X202.789 Y218.814
    G1 X200.463 Y220.077
    G1 X198.88 Y220.84
    G1 X198.074 Y221.212
    G1 X197.259 Y221.566
    G1 X196.448 Y221.898
    G1 X194.809 Y222.536
    G1 X193.132 Y223.105
    G1 X192.284 Y223.372
    G1 X190.589 Y223.866
    G1 X188.876 Y224.293
    G1 X187.157 Y224.659
    G1 X185.417 Y224.958
    G1 X184.539 Y225.093
    G1 X183.658 Y225.209
    G1 X182.787 Y225.304
    G1 X181.025 Y225.466
    G1 X179.27 Y225.558
    G1 X176.699 Y225.581

[gcode_macro _slot7550]
description: 75xd50mm slot 1 pass
gcode:
    G1 X139.747 Y200.418
    G1 X215.692 Y200.416
    G1 X217.033 Y200.358
    G1 X218.344 Y200.231
    G1 X219.225 Y200.108
    G1 X220.098 Y199.95
    G1 X220.538 Y199.863
    G1 X220.977 Y199.763
    G1 X221.832 Y199.55
    G1 X222.263 Y199.432
    G1 X222.684 Y199.308
    G1 X223.111 Y199.171
    G1 X223.943 Y198.889
    G1 X224.77 Y198.567
    G1 X225.184 Y198.396
    G1 X225.989 Y198.038
    G1 X226.397 Y197.845
    G1 X226.789 Y197.65
    G1 X227.186 Y197.443
    G1 X227.582 Y197.228
    G1 X227.961 Y197.011
    G1 X228.718 Y196.561
    G1 X229.465 Y196.072
    G1 X229.836 Y195.816
    G1 X230.549 Y195.299
    G1 X230.906 Y195.024
    G1 X231.59 Y194.47
    G1 X231.931 Y194.179
    G1 X232.593 Y193.588
    G1 X233.222 Y192.975
    G1 X233.538 Y192.656
    G1 X233.846 Y192.332
    G1 X234.142 Y192.009
    G1 X234.438 Y191.671
    G1 X235.005 Y191.001
    G1 X235.551 Y190.296
    G1 X235.813 Y189.946
    G1 X236.073 Y189.578
    G1 X236.576 Y188.839
    G1 X237.264 Y187.716
    G1 X237.899 Y186.546
    G1 X238.286 Y185.745
    G1 X238.472 Y185.338
    G1 X238.821 Y184.515
    G1 X238.982 Y184.107
    G1 X239.29 Y183.272
    G1 X239.557 Y182.435
    G1 X239.685 Y182.006
    G1 X239.916 Y181.143
    G1 X240.018 Y180.716
    G1 X240.205 Y179.857
    G1 X240.36 Y178.981
    G1 X240.483 Y178.102
    G1 X240.573 Y177.209
    G1 X240.608 Y176.772
    G1 X240.657 Y175.894
    G1 X240.673 Y175
    G1 X240.657 Y174.106
    G1 X240.608 Y173.227
    G1 X240.574 Y172.78
    G1 X240.532 Y172.344
    G1 X240.479 Y171.896
    G1 X240.356 Y171.023
    G1 X240.286 Y170.593
    G1 X240.202 Y170.15
    G1 X240.02 Y169.275
    G1 X239.803 Y168.422
    G1 X239.685 Y167.987
    G1 X239.559 Y167.569
    G1 X239.286 Y166.718
    G1 X238.982 Y165.893
    G1 X238.816 Y165.473
    G1 X238.472 Y164.662
    G1 X238.286 Y164.255
    G1 X237.899 Y163.454
    G1 X237.264 Y162.284
    G1 X236.569 Y161.15
    G1 X236.073 Y160.422
    G1 X235.813 Y160.054
    G1 X235.551 Y159.704
    G1 X235.012 Y159.008
    G1 X234.438 Y158.329
    G1 X234.142 Y157.992
    G1 X233.838 Y157.663
    G1 X233.231 Y157.028
    G1 X232.257 Y156.105
    G1 X231.591 Y155.531
    G1 X231.245 Y155.245
    G1 X230.548 Y154.696
    G1 X229.837 Y154.179
    G1 X228.729 Y153.446
    G1 X227.961 Y152.989
    G1 X227.582 Y152.772
    G1 X227.186 Y152.557
    G1 X226.789 Y152.35
    G1 X226.397 Y152.155
    G1 X225.989 Y151.962
    G1 X225.184 Y151.604
    G1 X224.78 Y151.437
    G1 X223.941 Y151.111
    G1 X222.679 Y150.689
    G1 X221.832 Y150.45
    G1 X221.408 Y150.34
    G1 X220.537 Y150.139
    G1 X220.109 Y150.052
    G1 X219.223 Y149.892
    G1 X218.35 Y149.773
    G1 X217.906 Y149.72
    G1 X217.468 Y149.678
    G1 X217.03 Y149.644
    G1 X216.584 Y149.618
    G1 X215.703 Y149.588
    G1 X215.25 Y149.582
    G1 X139.308 Y149.584
    G1 X137.967 Y149.642
    G1 X136.643 Y149.77
    G1 X135.326 Y149.967
    G1 X134.024 Y150.232
    G1 X133.172 Y150.445
    G1 X131.898 Y150.822
    G1 X131.058 Y151.115
    G1 X130.637 Y151.27
    G1 X130.221 Y151.434
    G1 X129.816 Y151.602
    G1 X129.405 Y151.783
    G1 X128.598 Y152.155
    G1 X127.816 Y152.558
    G1 X127.431 Y152.767
    G1 X126.657 Y153.214
    G1 X126.273 Y153.449
    G1 X125.533 Y153.929
    G1 X125.173 Y154.175
    G1 X124.808 Y154.438
    G1 X124.093 Y154.971
    G1 X123.406 Y155.533
    G1 X123.071 Y155.817
    G1 X122.735 Y156.116
    G1 X122.091 Y156.717
    G1 X121.772 Y157.031
    G1 X121.159 Y157.66
    G1 X120.278 Y158.655
    G1 X119.718 Y159.346
    G1 X118.928 Y160.414
    G1 X118.193 Y161.524
    G1 X117.736 Y162.291
    G1 X117.521 Y162.672
    G1 X117.095 Y163.463
    G1 X116.714 Y164.255
    G1 X116.526 Y164.662
    G1 X116.347 Y165.074
    G1 X116.181 Y165.479
    G1 X115.858 Y166.31
    G1 X115.576 Y167.142
    G1 X115.441 Y167.569
    G1 X115.195 Y168.428
    G1 X115.085 Y168.852
    G1 X114.884 Y169.708
    G1 X114.716 Y170.591
    G1 X114.642 Y171.024
    G1 X114.579 Y171.458
    G1 X114.466 Y172.347
    G1 X114.388 Y173.231
    G1 X114.346 Y174.117
    G1 X114.333 Y174.558
    G1 X114.329 Y174.996
    G1 X114.333 Y175.442
    G1 X114.346 Y175.883
    G1 X114.388 Y176.769
    G1 X114.466 Y177.653
    G1 X114.577 Y178.533
    G1 X114.642 Y178.976
    G1 X114.718 Y179.418
    G1 X114.881 Y180.281
    G1 X115.086 Y181.149
    G1 X115.193 Y181.572
    G1 X115.315 Y182.006
    G1 X115.569 Y182.849
    G1 X116.013 Y184.104
    G1 X116.349 Y184.927
    G1 X116.526 Y185.339
    G1 X116.715 Y185.747
    G1 X117.101 Y186.54
    G1 X117.307 Y186.939
    G1 X117.517 Y187.321
    G1 X117.964 Y188.096
    G1 X118.193 Y188.469
    G1 X118.678 Y189.216
    G1 X118.926 Y189.58
    G1 X119.181 Y189.937
    G1 X119.446 Y190.296
    G1 X119.721 Y190.651
    G1 X120.271 Y191.336
    G1 X121.151 Y192.332
    G1 X121.78 Y192.977
    G1 X122.092 Y193.284
    G1 X122.733 Y193.886
    G1 X123.412 Y194.477
    G1 X124.452 Y195.304
    G1 X125.165 Y195.817
    G1 X125.534 Y196.071
    G1 X126.273 Y196.551
    G1 X126.657 Y196.786
    G1 X127.419 Y197.226
    G1 X127.816 Y197.442
    G1 X128.608 Y197.849
    G1 X129.413 Y198.221
    G1 X129.816 Y198.398
    G1 X130.221 Y198.566
    G1 X130.638 Y198.728
    G1 X131.476 Y199.033
    G1 X131.893 Y199.175
    G1 X132.311 Y199.306
    G1 X132.74 Y199.433
    G1 X133.173 Y199.551
    G1 X134.024 Y199.768
    G1 X134.904 Y199.951
    G1 X135.333 Y200.03
    G1 X136.216 Y200.17
    G1 X136.65 Y200.227
    G1 X137.525 Y200.319
    G1 X137.974 Y200.356
    G1 X138.423 Y200.382
    G1 X139.305 Y200.413
    G1 X139.672 Y200.417
